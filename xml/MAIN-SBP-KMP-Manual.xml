<?xml version="1.0" encoding="UTF-8"?>
<!--<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>-->
<!DOCTYPE article [
<!ENTITY % entity SYSTEM "entity-decl.ent">
%entity;
]>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="art.sbp.rpm.packaging"
    xml:lang="en">
    <info>
        <title>Kernel Module Packages Manual for SUSE-based Distributions</title>
        <subtitle/>
        <!--<orgname>SUSE Best Practices</orgname>-->
        <productname>SUSE Linux Enterprise Server</productname>
        <productnumber/>
        <author>
            <personname>
                <firstname>Ann</firstname>
                <surname>Davis, Senior Software Engineer, SUSE</surname>
            </personname>
            <!--<personname>
                <firstname>Ann</firstname>
                <surname>Davis</surname>
            </personname>
            <affiliation>
                <jobtitle>Senior Software Engineer</jobtitle>
                <orgname>SUSE</orgname>
            </affiliation>-->
        </author>
        <date><?dbtimestamp format="B d, Y" ?></date>


        <abstract>

            <para>SUSE-based distributions use the RPM Package Manager for software management. As
                such, any external kernel modules (these are kernel modules not included in SUSE
                kernel packages) should be packaged in RPM packages. These RPMs should be built in
                accordance with specific guidelines to ensure that the resulting Kernel Module
                Packages (KMPs) can be installed and updated appropriately, in synchronization with
                kernel updates. </para>

            <para>This document specifies the requirements for RPM packages that contain kernel
                modules, and describes the processes surrounding those packages including building,
                signing, installing and upgrading. A complete example is given and explained. </para>

        </abstract>
    </info>


    <sect1 xml:id="sec.scope">

        <title>Scope</title>

        <para>This version of the Kernel Module Packages Manual applies to:</para>

        <itemizedlist>
            <listitem>
                <para>the Code 11 code base, which includes openSUSE 11.1 and newer, SUSE Linux
                    Enterprise Server or Desktop 11</para>
            </listitem>
            <listitem>
                <para>SUSE Linux Enterprise Server or Desktop 12 (along with service packs)</para>
            </listitem>
            <listitem>
                <para>All products and extensions based on SUSE Linux Enterprise Server 11 and SUSE
                    Linux Enterprise Server 12</para>
            </listitem>
        </itemizedlist>

        <para>Versions of this document for Code 9 and Code 10 are available as well and can be
            found at <link
                xlink:href="http://www.novell.com/developer/kernel_module_packages_manuals.html"
            > </link></para>

        <para>This document's Appendix B highlights Code 10 to Code 11 changes and secure boot
            changes for SUSE Linux Enterprise Server and SUSE Linux Enterprise Desktop 11 SP3 and
            later versions. </para>
    </sect1>


    <sect1 xml:id="sec.background">

        <title>Background</title>

        <para>The Linux kernel supports adding functionality at runtime through kernel-loadable
            modules. It includes more than 1500 modules, about 75 percent of which are hardware
            drivers. These modules are shipped as part of the kernel packages. In some cases it is
            desirable to add additional modules or replace existing ones. For example, a driver for
            a particular storage controller that was not available at the time of product release
            might be added later to support new hardware.</para>

        <para>Kernel modules interact with the kernel by the means of exported symbols, in a way
            similar to how user space binaries use shared libraries. The /proc/kallsyms file lists
            all symbols currently known to the kernel. To ensure that the kernel and modules refer
            to the same symbols, a version checksum (modversion) is added to each symbol. The
            checksum is computed from the symbol's type: in the case of function symbols, the
            checksum is determined by the function's parameters and return type.</para>

        <para>When any of a function's parameters or the return type changes, the checksum changes
            as well. This includes all the data types involved recursively:</para>

        <para>If a function takes a <emphasis role="strong">struct task_struct</emphasis> as
            parameter and <emphasis role="strong">struct task_struct</emphasis> includes a field of
            type <emphasis role="strong">struct dentry</emphasis>, then a change to <emphasis
                role="strong">struct dentry</emphasis> will cause the symbol's version checksum to
            change as well. Symbol version checksums for different kernel flavors (for example
                <emphasis role="strong">kernel-default</emphasis> versus <emphasis role="strong"
                >kernel-xen</emphasis>) will not match, and symbol versions of the same kernel
            package on different architectures (for example <emphasis role="strong"
                >kernel-default</emphasis> on i386 versus x86_64) will not match either. This
            mechanism ensures that the kernel and kernel modules agree on the types of data
            structures that they use to communicate.</para>

        <para>Unless symbol version checking is disabled, modules will load only if the checksums of
            the symbols they use match the checksums of the symbols that the kernel exports. The
            exported symbols and their version checksums comprise the kernel Application Binary
            Interface (kABI). When an updated kernel includes kABI changes, kernel modules that use
            any modified symbols must be updated as well. </para>

        <para>During its multi-year life cycle, products like SUSE Linux Enterprise Server undergo
            continuous changes, and different kinds of updates like Service Packs (SPs),
            maintenance/security updates, and customer-specific updates (Program Temporary Fixes)
            are released. The Application Binary Interface (ABI) between the kernel and kernel
            modules is volatile. Some kernel updates will change the kernel ABI (kABI) by adding or
            removing exported symbols, or existing symbol checksums can change in a kernel update
            because of changes in data structures they reference. SUSE strives to keep the kernel
            ABI stable in maintenance and security and customer-specific updates, but sometimes
            changes cannot avoided. In Service Packs, SUSE reserves the right to introduce more
            intrusive changes, which increases the likelihood of ABI changes. SUSE believes that the
            added flexibility outweighs the disadvantages of breaking older modules. For full
            discussion of this topic, see the documentation <quote>SUSE SolidDriver Documentation:
                SUSE Kernel ABI Stability</quote> at <link
                xlink:href="https://drivers.suse.com/doc/SolidDriver/SUSE_Kernel_ABI_Stability.html"
            /> and <quote>The Linux Kernel Driver Interface</quote> from Greg Kroah-Hartman at <link
                xlink:href="http://www.kroah.com/log/linux/stable_api_nonsense.html"/>, which is
            also provided as <emphasis role="strong">stable_api_nonsense.txt</emphasis> in the
            upstream kernel source tree.</para>

        <para>SUSE-based operating systems include technology to ensure that kernel modules can be
            reused or updated in synchronization with kernel updates. To make use of this
            technology, kernel modules must be packaged into Kernel Module Packages (KMPs) as
            defined in this document.</para>

    </sect1>


    <sect1 xml:id="sec.kernel_packages">

        <title>Kernel Packages</title>

        <para>All SUSE products based on kernels 2.6.x, 3.0.x, and 4.4.x contain a set of kernel
            packages that share the same version and release number; they are built from the same
            kernel sources. These packages are:</para>

        <bridgehead>kernel-<emphasis role="italic">flavor</emphasis>, kernel-<emphasis role="italic"
                >flavor-base</emphasis></bridgehead>

        <para>The binary kernel packages. Each architecture has its own set of kernel flavors (for
            example, kernel-pae, kernel-default, kernel-xen, etc.). These are the packages that the
            kernel modules will be used with.</para>

        <bridgehead>kernel-<emphasis role="italic">source</emphasis></bridgehead>

        <para>The kernel source tree, generated by unpacking the vanilla kernel sources and applying
            all necessary patches. Although the kernel-flavor packages technically are not built
            from the kernel-source package, they are built from the same source tree. This tree
            should be used for module building.</para>

        <bridgehead>kernel-<emphasis role="italic">syms</emphasis>, kernel-<emphasis role="italic"
                >flavor-devel</emphasis></bridgehead>

        <para>Kernel symbol version information for compiling external modules. The
            kernel-flavor-devel package is required for building external modules. If this package
            is not used, the resulting modules will be missing symbol version information, which
            will cause them to break during kernel updates. The kernel-source and kernel-devel
            packages used for compiling external modules must match each other exactly.</para>

        <para>Starting with SUSE Linux Enterprise Server and SUSE Linux Enterprise Desktop 11 SP1,
            the kernel-syms package is a place-holder package which depends on the
            kernel-flavor-devel packages for all kernel flavors.</para>

        <para>For more information, refer to the document <quote>Working With The SUSE 2.6.x and 3.x
            Kernel Sources</quote> from Andreas Gruenbacher and Michal Marek, which is provided as
            README.SUSE in the SUSE kernel-source package.</para>



    </sect1>


    <sect1 xml:id="sec.setup_dhcp">

        <title>Setting Up DHCP Services</title>

        <para>Go into YaST and select <emphasis role="strong">DHCP Server</emphasis> from network
            services. Configure the IP range you want to use. After that, it is your choice on
            whether you use YaST or edit the configuration file
                (<filename>/etc/dhcpd.conf</filename>) manually. As with the other services, be sure
            to open the ports in the firewall. The end result needs to be a file that looks like the
            below:</para>

        <screen>option domain-name "my.lab";
option domain-name-servers 172.16.253.5;
option routers 192.168.124.1;
option ntp-servers 192.168.124.3;
option arch code 93 = unsigned integer 16; # RFC4578
default-lease-time 3600;
ddns-update-style none;
subnet 192.168.124.0 netmask 255.255.255.0 {
  range 192.168.124.100 192.168.124.199;
  next-server 192.168.124.3;
  default-lease-time 3600;
  max-lease-time 3600;
  if option arch = 00:07 or option arch = 00:09 {
   filename "/EFI/x86/bootx64.efi";
    } else if option arch = 00:0b {
   filename "/EFI/armv8/bootaa64.efi";
    } else {
   filename "/bios/x86/pxelinux.0";
    }
}</screen>

        <note>
            <title>
                <code>if option arch</code>
            </title>
            <para>The <code>if option arch</code> sections allow the DHCP server to make the correct
                decision on which file to use for booting.</para>
        </note>
    </sect1>


 
    <?pdfpagebreak style="suse2013" formatter="fop"?>
    <xi:include href="license-gfdl.xml"/>
</article>
