<?xml version="1.0" encoding="UTF-8"?>
<!--<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>-->
<!DOCTYPE article [
<!ENTITY % entity SYSTEM "entity-decl.ent">
%entity;
]>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="art.sbp.suma.life"
    xml:lang="en">

    <info>
        <title>Data Replication across Geo-clusters via DRBD included with SUSE Linux Enterprise
            High Availability Extension</title>
        <subtitle>Methods and approaches for managing updates using SUSE Manager in multi-landscape
            environments</subtitle>
        <orgname>SUSE Best Practices</orgname>
        <productname>SUSE Linux Enterprise High Availability Extension</productname>
        <productnumber>2.1 and 3.0</productnumber>

        <author>
            <personname>
                <firstname>Matt</firstname>
                <surname>Kereczman</surname>
            </personname>
            <affiliation>
                <jobtitle>Cluster Engineer</jobtitle>
                <orgname>LINBIT</orgname>
            </affiliation>
        </author>

        <author>
            <personname>
                <firstname>Philipp</firstname>
                <surname>Marek</surname>
            </personname>
            <affiliation>
                <jobtitle>Senior Software Developer</jobtitle>
                <orgname>LINBIT</orgname>
            </affiliation>
        </author>

        <author>
            <personname>
                <firstname>Kristoffer</firstname>
                <surname>Groenlund</surname>
            </personname>
            <affiliation>
                <jobtitle>Architect High Availability</jobtitle>
                <orgname>&suse;</orgname>
            </affiliation>
        </author>

        <date>October 12, 2016</date>

        <abstract>
            <para>This technical setup describes the setup of a geo cluster using Distributed
                Replicated Block Device (DRBD) as delivered with the SUSE Linux Enterprise High
                Availability Extension.</para>
        </abstract>
    </info>


    <sect1 xml:id="sec.background">
        <title>Background</title>

        <sect2 xml:id="sec.drbd">
            <title>About DRBD</title>

            <para>DRBD is a Linux-kernel block-level replication facility that is widely used as an
                shared-nothing cluster building block. It is included in vanilla kernels since
                2.6.33, and most distributions ship the necessary userspace utilities. Furthermore,
                many distributions have newer DRBD versions than the one included in the kernel
                package in extra packages.</para>

            <para>DRBD can replicate across multiple network protocols, and in (currently) three
                modes, from synchronous for local HA clusters, to asynchronous for pushing data to a
                disaster recovery site.</para>

            <para>DRBD is developed and supported world-wide by LINBIT <link
                    xlink:href="http://www.linbit.com"/>. That includes most distributions and
                architectures, with Service Level Agreements (SLA) levels up to 24/7 email and phone
                availability.</para>
        </sect2>

        <sect2 xml:id="sec.sleshae">
            <title>About SUSE Linux Enterprise High Availability Extension</title>

            <para>SUSE Linux Enterprise High Availability Extension is an integrated suite of open
                source clustering technologies that enables you to implement highly available
                physical and virtual Linux clusters, and to eliminate single points of failure. It
                ensures the high availability and manageability of critical network resources
                including data, applications, and services. Thus, it helps you maintain business
                continuity, protect data integrity, and reduce unplanned downtime for your
                mission-critical Linux workloads.</para>

            <para>SUSE Linux Enterprise High Availability Extension ships with essential monitoring,
                messaging, and cluster resource management functionality (supporting failover,
                failback, and migration (load balancing) of individually managed cluster
                resources).</para>

            <para>SUSE Linux Enterprise High Availability Extension includes DRBD.</para>
        </sect2>
    </sect1>

    <sect1 xml:id="sec.introduction">
        <title>Introduction</title>

        <para>This tech-guide describes a setup consisting of two highly available Pacemaker
            clusters in two sites, with a routed IPv4 or IPv6 connection in between. The connection
            can range from a few Mbit/sec up to 10GBit/ sec, depending on the IO load imposed on the
            cluster nodes.</para>

        <para>Various services can be distributed across the clusters. Because of latency between
            the data centers you will not be able to drive a cluster filesystem across them. But
            simply replicating the data to have a quick failover in case one site goes down is
            possible.</para>

        <para>Failover between the two sites is managed using the <emphasis role="italic">Booth
                Cluster Ticket Manager</emphasis>, which is included in the Geo Clustering for SUSE
            Linux Enterprise High Availability Extension. In addition to the two cluster sites, a
            third site is needed to run a booth Arbitrator. Arbitrators are single machines that run
            a booth instance in a special mode. As all booth instances communicate with each other,
            arbitrators help to make more reliable decisions about granting or revoking tickets.
            Arbitrators cannot hold any tickets. </para>

        <para>Lots of details will be skimmed; for example, for this technical guide it does not
            matter whether the application driving IO is SAP, an NFS server, a PostgreSQL instance,
            VMs via KVM, Apache, MySQL, or whatever else you may have in use.</para>

    </sect1>

    <sect1 xml:id="sec.installation">
        <title>Installation and Needed Parts</title>

        <para>You need to install the Pacemaker cluster stack 3 from <link
                xlink:href="http://clusterlabs.org/"/>, with Heartbeat(v3) or Corosync as cluster
            communication manager, on both pairs of nodes 4. </para>

        <note>
            <title>DRBD 9</title>
            <para>With DRBD 9 more than two-way redundancy can be achieved in each site, allowing
                for easier balancing of I/O load and storage use.</para>
        </note>

        <para>DRBD 9 has at the time of this writing a stable version 9.0.2; you can either compile
            it yourself, or get it from LINBIT at <link
                xlink:href="http://www.linbit.com/en/company/contact"/> . DRBD 8 has at the time of
            this writing a stable version 8.4.7; if your distribution doesn’t already contain
            matching kernel-module and userspace packages, you can either compile them yourself, or
            get them from LINBIT.</para>

        <para>It is good practice and recommended to use LVM as the storage layer below DRBD. This
            facilitates quick and easy creation and online enlarging of DRBD devices.</para>

        <para>Of course, you will need to install all the software inclusive dependencies for the
            services you want to run on all four nodes. In case you replicate Virtual Machines
            (VMs), these are typically self-contained, so you will just need the KVM environment
            like virsh on the cluster nodes.</para>



        <figure>
            <title>Child Channels Screenshot</title>
            <mediaobject>
                <imageobject role="fo">
                    <imagedata fileref="screen-child-channels.png" width="90%" format="PNG"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="screen-child-channels.png" width="90%" format="PNG"/>
                </imageobject>
            </mediaobject>
        </figure>

    </sect1>

    <sect1 xml:id="sec.architecture">
        <title>Cluster Architecture Overview</title>

        <para>The following image depicts a two site, four-node cluster with arrows showing the
            direction of replication, and blocks in orange showing that a DRBD device is Primary.
            There are two nodes in the local site, <emphasis role="italic">alice</emphasis> and
                <emphasis role="italic">bob</emphasis>, and two nodes in the remote site, <emphasis
                role="italic">charlie</emphasis> and <emphasis role="italic"
            >daisy</emphasis>.</para>

        <para>Each site will have its own DRBD resource stack and service IP to allow independent
            migration across the cluster nodes.</para>

        <figure>
            <title>Child Channels Screenshot</title>
            <mediaobject>
                <imageobject role="fo">
                    <imagedata fileref="screen-child-channels.png" width="90%" format="PNG"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="screen-child-channels.png" width="90%" format="PNG"/>
                </imageobject>
            </mediaobject>
        </figure>

    </sect1>

    <sect1 xml:id="sec.usage">
        <title>Usage Workflows</title>

        <para>This guide describes an approach to patch lifecycle management that leverages SUSE
            Manager to deliver the following benefits:</para>

        <itemizedlist>
            <listitem>
                <para>Automated creation of Patch Archive Channels:<itemizedlist>
                        <listitem>
                            <para>These channels can be created on a quarterly (or more frequent)
                                basis and allow an organization to create test environments based on
                                a historical set of patches (for example, the creation of a lab
                                using available patches from two calendar quarters ago).</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </listitem>
            <listitem>
                <para>Leverage a static set of <quote>current</quote> update channels so host
                    subscriptions do not have to change:</para>
                <itemizedlist>
                    <listitem>
                        <para>Using the API/scripts, updates can be merged from a patch
                                <quote>archive</quote> into a subscribed host channel removing the
                            need to constantly clone and re-clone channels and modify host
                            subscriptions.</para>
                    </listitem>
                    <listitem>
                        <para>Multi-landscape environments can use a promotion process to merge
                            updates through each phase during testing/validation of patch
                            sets.</para>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem>
                <para>Exception handling for patches that need to be excluded from a patch rollout:<itemizedlist>
                        <listitem>
                            <para>The creation of a <quote>patch exceptions</quote> channel and a
                                process for copying patches/packages into that channel (and then
                                removing them from an updates channel) allows for tracking of patch
                                exceptions. This channel should be <emphasis>excluded</emphasis>
                                from any hosts channel subscriptions, thereby keeping all
                                patch/package content from being visible or available for
                                installation.</para>
                        </listitem>
                        <listitem>
                            <para>Patch exceptions <quote>processes</quote> must be developed in
                                order to track remediation of all exceptions in order to avoid
                                future complications from managing an ever-growing bucket of
                                patches.</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </listitem>
            <listitem>
                <para>Security ASAP Exceptions handling for patches that need to roll out with a
                    higher priority:<itemizedlist>
                        <listitem>
                            <para>The security ASAP exception channel should always be subscribed to
                                (unlike the <quote>patch exceptions</quote> channel). Subscription
                                to this channel allows a host to obtain patches/packages added in an
                                ad hoc manner, for example a security patch deemed important enough
                                to deploy outside of a normal patch schedule. This could be copied
                                from a new archive or directly from one of the SUSE (vendor) updates
                                channels.</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </listitem>
        </itemizedlist>

        <sect2 xml:id="sec.exprocesswf">
            <title>Example Process Workflows</title>

            <para>Here are some suggested workflows for the patch promotion and exception processes.
                Keep in mind that these can be modified to fit more closely to a particular
                operational group’s existing set of processes.</para>

            <bridgehead>Workflow 1: Patch Promotion Process</bridgehead>

            <para>The patch promotion process follows the following sample steps.</para>

            <table>
                <title>Patch Promotion Process</title>
                <tgroup cols="3">
                    <colspec colwidth="3cm"/>
                    <colspec colwidth="1*"/>
                    <colspec colwidth="1*"/>
                    <thead>
                        <row>
                            <entry>Action</entry>
                            <entry>Process</entry>
                            <entry>Notes</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>Review</entry>
                            <entry>Refer to the existing calendar to determine the start date for a
                                patch rollout.</entry>
                            <entry>Start dates typically happen when a new quarter begins, but this
                                depends on your frequency and established periods for
                                rollouts.</entry>
                        </row>
                        <row>
                            <entry>Select</entry>
                            <entry>Identify the SUSE Manager Organization and the environment
                                targets for the patch rollout.</entry>
                            <entry>In the scenario here, this could be CORP or STORE or NPE, and
                                depending on the use of SUSE Manager Organizations an administrator
                                would need to log in to the Organization to see the hosts.</entry>
                        </row>
                        <row>
                            <entry>Select</entry>
                            <entry>Choose the SUSE Linux Enterprise Server version(s) that will be
                                patched.</entry>
                            <entry>Patch promotions are done for each SUSE Linux Enterprise Server
                                version. Each version has its own set of landscape channels that
                                patches get promoted through (DEV, TEST, QA, PROD, etc.).</entry>
                        </row>
                        <row>
                            <entry>Merge</entry>
                            <entry>Merge the current archive into the initial landscape (or
                                landscape of choice).</entry>
                            <entry>Using the <quote>Merge Script</quote> utility: select the
                                    <emphasis role="strong">source</emphasis> channel (<emphasis
                                    role="strong">archive</emphasis> in this case) and <emphasis
                                    role="strong">target</emphasis> channel (DEV - Current to begin
                                a series).</entry>
                        </row>
                        <row>
                            <entry>Deploy</entry>
                            <entry>Deploy patches from the current landscape to the subscribed
                                hosts.</entry>
                            <entry>Once patches have been merged, the status of hosts subscribed to
                                the <quote>current</quote> channel will show which patches are now
                                available. Issue the appropriate patch commands to deploy these
                                patches.</entry>
                        </row>
                        <row>
                            <entry>Test</entry>
                            <entry>Coordinate testing for the hosts that have received the latest
                                deployed patches, or notify the appropriate teams/LOB to start their
                                evaluation.</entry>
                            <entry>After the patches have been deployed, a period of testing or
                                review should start–in order to validate the success of the patch
                                deployment. Coordination should occur with business partners to
                                establish success of deployment.</entry>
                        </row>
                        <row>
                            <entry>Evaluate</entry>
                            <entry>Evaluate the results of the previous merge/deploy and proceed
                                with the next landscape. If final landscape, report
                                completion.</entry>
                            <entry>Continue to merge and deploy patch sets into each landscape until
                                the final one. Report completion–all hosts should show
                                    <quote>green</quote> status.</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>


            <bridgehead>Workflow 2: Patch Exception Process</bridgehead>

            <para>The patch exception process follows the following sample steps. Again, keep in
                mind that these can be modified to fit more closely to a particular operational
                group’s existing set of processes.</para>
            <para>Consider the following table:</para>

            <table>
                <title>Patch Exception Process</title>
                <tgroup cols="3">
                    <colspec colwidth="3cm"/>
                    <colspec colwidth="1*"/>
                    <colspec colwidth="1*"/>
                    <thead>
                        <row>
                            <entry>Action</entry>
                            <entry>Process</entry>
                            <entry>Notes</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>Identify</entry>
                            <entry>Locate the patch you wish to identify as an
                                    <quote>exception</quote> for potential removal from patch
                                set.</entry>
                            <entry>Find the patch using the search tools in SUSE Manager, or locate
                                the patch in a specific Archive or Landscape Channel.</entry>
                        </row>
                        <row>
                            <entry>Copy</entry>
                            <entry>Using the <quote>Manage Channels</quote> function of SUSE
                                Manager: select the <emphasis role="strong">exception</emphasis>
                                channel for a specific version of SUSE Linux Enterprise Server and
                                add the identified patch into it from the source (from previous
                                step).</entry>
                            <entry>
                                <para>The source of the patch (channel) and the target of the patch
                                    (exceptions channel) are important. This step may be repeated
                                    for several different versions of SUSE Linux Enterprise Server.
                                    Potential sources for the patch can be an:</para>
                                <orderedlist numeration="loweralpha">
                                    <listitem>
                                        <para>Archive Channel</para>
                                    </listitem>
                                    <listitem>
                                        <para>Landscape Channel</para>
                                    </listitem>
                                    <listitem>
                                        <para>SUSE Updates Channel</para>
                                    </listitem>
                                </orderedlist>
                            </entry>
                        </row>
                        <row>
                            <entry>Remove</entry>
                            <entry>Using the <quote>Manage Channels</quote> function of SUSE
                                Manager: <emphasis>list</emphasis> the patches to find the patch
                                that was <quote>added</quote> in the previous step. Find it and then
                                    <emphasis role="strong">remove</emphasis> it from the current
                                phase (or phases).</entry>
                            <entry>Finding the patch and then removing it from a Landscape Channel
                                keeps the subscribed hosts from seeing the patch–and reporting its
                                applicability.</entry>
                        </row>
                        <row>
                            <entry>Track</entry>
                            <entry>Submit any tickets or commence any established process to track
                                this patch exception.</entry>
                            <entry>The goal of tracking is to remain aware that there is an
                                exception and attempt to remediate, allowing the patch to be
                                reintroduced into a patch deployment cycle.</entry>
                        </row>
                        <row>
                            <entry>Remediate</entry>
                            <entry>Work to remediate the exception.</entry>
                            <entry>Once a fix has been identified/created for a given exception, the
                                patch can be reintroduced into a deployment workflow.</entry>
                        </row>
                        <row>
                            <entry>Note</entry>
                            <entry>Exceptions should only last for a <emphasis role="strong"
                                    >single</emphasis> deployment cycle. Keep in mind the next
                                archive will also contain this same patch–which is a <emphasis
                                    role="strong">good thing</emphasis>.</entry>
                            <entry>Exceptions should always be a temporary condition. Work should
                                always be done to fix the reasons a patch cannot rollout– compliance
                                can be at risk while an exception exists.</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>

            <bridgehead>Workflow 3: Security Patch ASAP Process</bridgehead>

            <para>The security exception process differs from the previous patch exception process
                in that a patch is now being <emphasis role="strong">added</emphasis> to a patch
                rollout cycle–likely in the middle of a current (inprogress) rollout. Another
                process table is included here as well as some screenshots from the SUSE Manager
                interface to provide further clarity.</para>
            <para>Review the following table:</para>

            <table>
                <title>Security Patch ASAP Process</title>
                <tgroup cols="3">
                    <colspec colwidth="3cm"/>
                    <colspec colwidth="1*"/>
                    <colspec colwidth="1*"/>
                    <thead>
                        <row>
                            <entry>Action</entry>
                            <entry>Process</entry>
                            <entry>Notes</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>Identify</entry>
                            <entry>Locate the patch you wish to identify as a <quote>security
                                    exception</quote>–for potential <emphasis role="strong">addition
                                    to</emphasis> a particular landscape or patch set. </entry>
                            <entry>Find the patch using the search tools in SUSE Manager, or locate
                                the patch in a specific Updates Channel for a specific version of
                                SUSE Linux Enterprise Server.</entry>
                        </row>
                        <row>
                            <entry>Copy</entry>
                            <entry>Using the <quote>Manage Channels</quote> function of SUSE
                                Manager, select the Security ASAP Exception Channel for a specific
                                version of SUSE Linux Enterprise Server and <emphasis>add</emphasis>
                                the identified patch to it from the source (likely the SUSE Updates
                                Channel from the previous step).</entry>
                            <entry>
                                <para>The source of the security patch (SUSE Updates Channel) and
                                    the target of the patch (Security Exceptions ASAP Channel) is
                                    key. This step may be repeated for several different versions of
                                    SLES. Potential source for the patch will likely be an:</para>
                                <orderedlist numeration="loweralpha">
                                    <listitem>
                                        <para>Archive Channel</para>
                                    </listitem>
                                    <listitem>
                                        <para>Landscape Channel</para>
                                    </listitem>
                                    <listitem>
                                        <para>SUSE Updates Channel</para>
                                    </listitem>
                                </orderedlist>
                            </entry>
                        </row>
                        <row>
                            <entry>Deploy</entry>
                            <entry>Deploy the Security Exception patch(es) into the selected
                                landscape to the subscribed hosts.</entry>
                            <entry>Once the Security patches have been added to a Landscape Channel,
                                the status of hosts subscribed to the “current” channel will show
                                patches are now available. Issue the appropriate patch commands to
                                deploy these patches.</entry>
                        </row>
                        <row>
                            <entry>Track</entry>
                            <entry>Submit any tickets or commence any established process to track
                                this Security Patch exception.</entry>
                            <entry>The goal of tracking is to remain aware that a Security Patch
                                exception has been deployed. This patch will become part of a normal
                                archive during the next quarterly automation creation.</entry>
                        </row>
                        <row>
                            <entry>Report</entry>
                            <entry>Security Exceptions normally occur to handle a compliance
                                concern. Once deployed, a compliance (Audit) report can be
                                generated.</entry>
                            <entry>Security Exceptions are handled as an escalation to the normal
                                schedule. They will, as a matter of normal operation, be part of the
                                next Archive and would be deployed as part of the default schedule–
                                and as a corollary, the next normal rollout would not need to
                                include this patch (as it will already be deployed).</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>

            <para>This screenshot shows the function of adding a patch to the Security ASAP
                Exceptions Channel–specifically the SLES 11 SP1 x86_64 version:</para>

            <figure>
                <title>Adding a patch to the Security ASAP Exceptions Channel</title>
                <mediaobject>
                    <imageobject role="fo">
                        <imagedata fileref="screen-security-exceptions.png" width="95%" format="PNG"
                        />
                    </imageobject>
                    <imageobject role="html">
                        <imagedata fileref="screen-security-exceptions.png" width="90%" format="PNG"
                        />
                    </imageobject>
                </mediaobject>
            </figure>

            <para>This screenshot provides a view of the <emphasis role="strong"
                    >List/Remove</emphasis> function of a specific channel (in this case, <quote>DEV
                    - Current - SLES11-SP1-LTSS-Updates for x86_64</quote>), and would be the
                interface where a patch would be removed from a channel and keep it from being
                visible and potentially deployed as part of an exception process.</para>

            <figure>
                <title>Adding a patch to the Security ASAP Exceptions Channel</title>
                <mediaobject>
                    <imageobject role="fo">
                        <imagedata fileref="screen-suma-patches.png" width="95%" format="PNG"/>
                    </imageobject>
                    <imageobject role="html">
                        <imagedata fileref="screen-suma-patches.png" width="90%" format="PNG"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </sect2>
    </sect1>

    <sect1 xml:id="sec.appendix">
        <title>Appendix</title>

        <sect2 xml:id="sec.spacewalksample">
            <title>Spacewalk-Clone-By-Date Configuration File Sample</title>
            <para>This sample is stored as a text file. It is used with the <emphasis role="strong"
                    >spacewalk-clone-by-date</emphasis> utility by using the <emphasis role="strong"
                    >-c</emphasis> flag to indicate an input config file:</para>

            <synopsis>spacewalk-clone-by-date -c Q3-2015-sles11sp3-x86_64-archive.conf</synopsis>

            <para>Note that it specifies the base channel source <emphasis role="strong"
                    >sles11-sp3-pool-x86_64</emphasis> and the target base channel (destination)
                    <emphasis role="strong">cc_patch_archives_channel_64bit</emphasis> and uses the
                directive of <quote role="strong">existing-parent-do-not-modify</quote>
                <emphasis role="strong">: true</emphasis>. This tells the utility that a child
                channel from one base will be cloned into a completely different base channel. Note
                that your channel names might be different; this means this example may need
                modifications to work in your case. Example: <emphasis role="strong"
                    >Q3-2015-sles11sp3-x86_64-archive.conf</emphasis> contents below. </para>


            <screen>
{
 "username":"SMadmin",
 "to_date": "2015-09-30",
 "skip_depsolve":false,
 "security_only":false,
 "use_update_date":false,
 "no_errata_sync":false,
 "dry_run":false,
 "channels":[
       {
         "sles11-sp3-pool-x86_64": {
            "label": "cc_patch_archives_channel_64bit",
            "existing-parent-do-not-modify": true
         },
         "sles11-sp3-updates-x86_64": {
            "label": "09_30_2015_q3_archive-sles11-sp3-updates-x86_64",
            "name": "Q3-2015 Patch Archive - 09-30-2015 - SLES11-SP3-Updates for x86_64",
            "summary": "Q3 - 2015 - Patch Archive Set (9-30-2015) - SUSE Linux Enterprise Server 11 SP3 x86_64",
            "description": "Q3 - 2015 - Patch Archive Set (9-30-2015) - SUSE Linux Enterprise Server 11 SP3 x86_64"
         }
        }
       ]
}  
</screen>


            <note>
                <title>Review Channel Patch Content </title>
                <para>When using the spacewalk-clone-by-date utility, please review the channel
                    patch content after creation to ensure that the channel contains the patches for
                    the appropriate end date. Sometimes extra patches are included in the channel
                    that are in the wrong time period and can be deleted manually.</para>
            </note>

        </sect2>

        <sect2 xml:id="sec.samplepatch">
            <title>Sample Patch/Package Merge Script Using Python</title>

            <para>This script has a defined SUSE Manager server URL set in the
                    <varname>MANAGER_URL</varname>. The script prompts for a SUSE Manager
                Administrator ID and password. It then asks for a source and target channel. The
                script will then confirm the channels and ask if it should continue. An affirmative
                response (Y) will then allow the script to merge the patches and packages from the
                source channel into the target channel.</para>

            <screen>#!/usr/bin/python
import xmlrpclib
import sys
import getpass
    
MANAGER_URL = "https://suma01.chameleoncorp.com/rpc/api"
MANAGER_LOGIN = raw_input("Please Enter the SUSE Manager Login Name: ")
MANAGER_PASSWORD = getpass.getpass("Please Enter the Password: ")

MERGE_SOURCE = raw_input("Enter the SOURCE channel label to Merge FROM: ")
MERGE_TARGET = raw_input("Enter the TARGET channel label to Merge INTO: ")

print("This tool is going to take all packages and errata from the SOURCE")
print("Channel : " + MERGE_SOURCE)
print("and merge it into the TARGET ")
print("Channel : " + MERGE_TARGET)

def query_yes_no(question, default="yes"):
    """Ask a yes/no question via raw_input() and return their answer.
    
    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits &lt;Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).
        
        The "answer" return value is True for "yes" or False for "no".
        """
        valid = {"yes": True, "y": True, "ye": True,
                 "no": False, "n": False}
        if default is None:
            prompt = " [y/n] "
        elif default == "yes":
            prompt = " [Y/n] "
        elif default == "no":
            prompt = " [y/N] "
        else:
            raise ValueError("invalid default answer: '%s'" % default)
            
        while True:
            sys.stdout.write(question + prompt)
            choice = raw_input().lower()
            if default is not None and choice == '':
                return valid[default]
            elif choice in valid:
                return valid[choice]
            else:
                sys.stdout.write("Please respond with 'yes' or 'no' "
                                 "(or 'y' or 'n').\n")
                
query_yes_no("Is this information correct?")

client = xmlrpclib.Server(MANAGER_URL, verbose=0)
key = client.auth.login(MANAGER_LOGIN, MANAGER_PASSWORD)

client.channel.software.mergePackages(key, MERGE_SOURCE, MERGE_TARGET)
client.channel.software.mergeErrata(key, MERGE_SOURCE, MERGE_TARGET)

client.auth.logout(key)</screen>

        </sect2>

        <sect2 xml:id="sec.samblecontab">
            <title>Sample Crontab Entries for Automation of Archive Channel Creation</title>

            <para>Below are some sample cron entries that can be used to run the <emphasis
                    role="strong">Archive Channel Creation Script</emphasis> resulting in channel
                creation for each quarter. This example has two entries in order to clone all
                patches received up until the end of a quarter. A single entry could be used to
                create it at the beginning of a quarter, but care must be taken to modify the
                calculations in the <emphasis role="strong">Archive Script</emphasis> to account for
                that. Currently the example <emphasis role="strong">Archive Channel Creation
                    Script</emphasis> below figures out what quarter it is by looking at the current
                date. Running the script in the 4<superscript>th</superscript> quarter will name the
                archive created as a 4<superscript>th</superscript> quarter archive.</para>

            <para>Cron entries for end of quarter: (e.g. 30<superscript>th</superscript> of months
                June and September and 31<superscript>st</superscript> of months March and
                December):</para>

            <para>
                <computeroutput>0 0 30 6,9 * /path/to/the/archive/script</computeroutput>
            </para>
            <para>
                <computeroutput>0 0 31 3,12 * /path/to/the/archive/script</computeroutput>
            </para>


        </sect2>

        <sect2 xml:id="sec.samplechancreation">
            <title>Sample Archive Channel Creation Script</title>
            <para>The script below works with the <emphasis role="strong">Archive Channel
                    Sources</emphasis> file (see <xref linkend="sec.samplechansources"/>) to create
                quarterly archives of the SUSE Updates channels. This example script is written in
                    <emphasis role="strong">Bash</emphasis> but calls <command>spacecmd</command> to
                accomplish the cloning and to set the new archive to be public (accessible to other
                organizations).</para>

            <para>The script takes some time to run. The clone command finishes quickly, but the
                actual cloned channel still takes some time to settle down before the
                    <command>org-access</command> command can access and finish. If you want to test
                this manually you must be patient. A normal crontab-type run of the script will
                finish in due time.</para>


            <screen>#!/bin/bash
    
        ####################################################################
        #    SUMA Archive Channel Creation Script - Called from Cron       #
        #                                                                  # 
        #    This script creates quarterly archives of SUSE Manager        #
        #    channels from SUSE Updates channels. It takes a list          #
        #    of source channels from the archive-sources.lst file          #
        #    that should be located in the same directory as this          #
        #    script. Each entry in that file will be used as a             #
        #    source channel to create an archive for patches/updates       #
        #    in the appropriate archive channel.                           #
        #                                                                  #
        # REQUIRES:                                                        #
        #                1. cron entries for each quarter :                #
        #     eg. 30th of months June and Sept. and 31st of months March   #
        #       and December:                                              #
        #                0 0 30 6,9 * /path/to/this/script                 #
        #                0 0 31 3,12 * /path/to/this/script                #
        #                                                                  #
        #                2. archive-sources.lst :                          #
        #     A list of the architecture, the source updates channel       #
        #     for each distro and the suffix of the target channel         #
        #     version and architecture (1 per line - no line-feed at EOF)  #
        #   Example:                                                       #
        #  S390x,sles11-sp3-updates-s390x,SLES11-SP3-Updates for s390x     #
        #  ppc64,sles11-sp4-updates-ppc64,SLES11-SP4-Updates for PPC       #
        #  x86_64,sles11-sp3-updates-x86_64,SLES11-SP3-Updates for x86_64  #
        #         etc.                                                     #
        #                                                                  #
        ####################################################################
        #                                                                  #
        #       Created by - Jeff Price, SUSE Consulting - 2015            #
        #                                                                  #
        ####################################################################

## date strings
month=`date +%m`
year=`date +%Y`
fdate=`date +%m-%d-%Y`
## set quarter
if [ $month -le 3 ]
then
   quar=1
elif [ $month -gt 3 ] &amp;&amp; [ $month -lt 7 ]
then
   quar=2
elif [ $month -gt 6 ] &amp;&amp; [ $month -lt 10 ]
then
   quar=3
elif [ $month -gt 9 ]
then
   quar=4
fi

## Create archives using source list

while read line
do
        arch=`echo "$line" | awk -F, '{print $1}'`
        src_ch=`echo "$line" | awk -F, '{print $2}'`
        trg_ch=`echo "$line" | awk -F, '{print $3}'`
## set archive channel

target_parent=$arch"-patch-archives-channel"
source_channel=$src_ch
target_channel_name="Q"$quar" "$year" - "$fdate" - Archive of "$trg_ch
target_summary="Q"$quar"-"$year" Archive Set "$trg_ch
target_channel_label="q"$quar"-"$year"-archive-"$src_ch

## Debug Output
echo "Architecture: " $arch
echo "Source Channel: "$src_ch
echo "Target Channel Archive Suffix: "$trg_ch
echo "Target Archive Parent Channel: "$target_parent
echo "Source Channel (again): "$source_channel
echo "Target Channel Name: "$target_channel_name
lctn=`echo $target_channel_name|tr '[:upper:]' '[:lower:]'`
echo "lowercase target name: "$lctn
echo "Target Channel Label: "$target_channel_label
echo "Target Channel Summary and Description: "$target_summary

/usr/bin/spacecmd -d -- softwarechannel_clone -s “‘$src_ch’” -n
“‘$target_channel_name’” -l “‘$target_channel_label’” -p “‘$target_parent’” - g
/usr/bin/spacecmd -d -- softwarechannel_setorgaccess
“‘$target_channel_label’” -e
done &lt; ./archive-sources.lst

</screen>
        </sect2>

        <sect2 xml:id="sec.samplechansources">
            <title>Sample Archive Channel Sources List File</title>

            <para>This file is called and used by the Archive Channel Creation script located above
                in the previous section (see <xref linkend="sec.samplechancreation"/>). Since the
                function “readline” is used, there should only be lines with data in the file. Any
                blank lines will be sourced as data and will cause errors with the Archive Channel
                Creation script above. </para>

            <para>The first field is <emphasis role="strong">architecture</emphasis>, which defines
                the source parent archive channel. This is where the new archive will be placed as a
                child channel. The second field is the <emphasis role="strong">source channel
                    label</emphasis>, which is where the patches/packages are coming FROM. The last
                field is used for <emphasis role="strong">target channel naming</emphasis>. This
                field will be part of the text that makes up the channel name and part of the
                channel summary/description fields.</para>

            <para>
                <synopsis>s390x,sles11-sp3-updates-s390x,SLES11-SP3-Updates for s390x
x86_64,sles11-sp4-updates-x86_64,SLES11-SP4-Updates for x86_64
i586,sles11-sp3-updates-x86_64,SLES11-SP3-Updates for x86_64</synopsis>
            </para>
        </sect2>

        <sect2 xml:id="sec.spacemdauthent">
            <title>Spacecmd Automatic Authentication</title>

            <para>The archive script example here is written in bash and calls the spacecmd shell.
                Normal operation of spacecmd and the SUSE Manager XMLRPC api requires authentication
                credentials. In order for the archive script to run successfully from cron, it would
                require some way of passing appropriate user credentials when required. Luckily
                there is a way to store user credential pairs.</para>

            <para>Upon the first invocation of the spacecmd utility/shell, a directory is created in
                the home directory of the user who calls spacecmd. The directory is called .spacecmd
                (e.g. /root/.spacecmd/). Within this directory is a file called config–and within
                this file you can store parameters that will be used when the user subsequently
                calls spacecmd. The parameters are as follows (substitute your username and
                password):</para>

            <screen>[spacecmd] 
server=localhost
username=admin
password=susemgr
nossl=0</screen>


            <para>Once those credentials are stored, you should be able to invoke the spacecmd shell
                or call spacecmd commands from the command line without being prompted for a
                username or password.</para>
        </sect2>

    </sect1>

    <?pdfpagebreak style="suse2013" formatter="fop"?>

    <xi:include href="license-gfdl.xml"/>

</article>
