<?xml version="1.0" encoding="UTF-8"?>
<!--<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>-->
<!DOCTYPE article [
<!ENTITY % entity SYSTEM "entity-decl.ent">
%entity;
]>
<article xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="art.sbp.rpm.packaging" xml:lang="en">
    <info>
        <title>Introduction to RPM Packaging</title>
        <subtitle/>
        <!--<orgname>SUSE Best Practices</orgname>-->
        <productname>SUSE Linux Enterprise, openSUSE</productname>
        <productnumber/>
        <author>
            <personname>
                <firstname>Duncan</firstname>
                <surname>Mac-Vicar Prett, Director Data Center Management -
                    Research and Development, SUSE</surname>
            </personname>
            <!-- <personname>
                <firstname>Duncan</firstname>
                <surname>Mac-Vicar Prett</surname>
            </personname>
            <affiliation>
            <jobtitle>Director Data Center Management - Research and Development</jobtitle>
                <orgname>SUSE</orgname>
            </affiliation>-->
        </author>
        <date><?dbtimestamp format="B d, Y" ?></date>
        <abstract>
            <para>In general, a pre-built, open source application is
                called a <emphasis role="italic">package</emphasis> and
                bundles all the binary, data, and configuration files
                required to run the application. A package also includes
                all the steps required to deploy the application on a
                system, typically in the form of a script. The script might
                generate data, start and stop system services, or
                manipulate files and directories. A script might also
                perform operations to upgrade existing software to a new
                version.</para>
            <para>Because each operating system has its idiosyncrasies, a
                package is typically tailored to a specific system.
                Moreover, each operating system provides its own <emphasis
                    role="italic">package manager</emphasis>, a special
                utility to add and remove packages from the system.
                SUSE-based systems â€“ openSUSE as well as SUSE Linux
                Enterprise - use the RPM Package Manager. The package
                manager precludes partial and faulty installations and
                    <quote>uninstalls</quote> by adding and removing the
                files in a package atomically. The package manager also
                maintains a manifest of all packages installed on the
                system and can validate the existence of prerequisites and
                co-requisites beforehand. </para>
            <para>This document describes in detail how to create an RPM
                package on SUSE-based systems. </para>
        </abstract>
    </info>
    <sect1 xml:id="sec.package">
        <title>What Is a Package</title>
        <para>A package is a way of distributing software on Linux systems.
            A single application is distributed as one or more packages.
            Usually the main package contains the program, and in addition
            some optional or secondary packages.</para>
        <para>On some platforms, applications are self-contained into a
            directory. This means installing an application is simply
            adding a folder, and uninstalling the application is simply
            removing this folder.</para>
        <para>Linux systems tend to share as much as components as
            possible. This is due partly to some advantages of this
            philosophy. But mainly it is due to the fact that in the Linux
            ecosystem, the whole universe is built by the same entity,
            except for a few 3rd party applications. This makes it easy to
            assume that a library is available for all applications to
            consume. </para>
        <para>In a MacOS system, only the core comes from a single vendor,
            and all applications are provided by third party suppliers. It
            is therefore harder to make assumptions, and they tend to ship
            their own version of any depending component, with the
            exception of everything documented as the
                <quote>platform</quote>.</para>
        <sect2 xml:id="sec.anatomy">
            <title>Anatomy of a Section</title>
            <para>As an example, we start with a well-known UNIX tool:
                rsync.</para>
            <para>A package is an archive file:</para>
            <screen>rsync-3.1.2-1.5.x86_64.rpm</screen>
            <para>This archive file contains all files related to the
                application:</para>
            <screen>$ rpm -qpl rsync-3.1.2-1.5.x86_64.rpm
            
/etc/logrotate.d/rsync
/etc/rsyncd.conf
/etc/rsyncd.secrets
/etc/sysconfig/SuSEfirewall2.d/services/rsync-server
/etc/xinetd.d/rsync
/usr/bin/rsync
/usr/bin/rsyncstats
/usr/lib/systemd/system/rsyncd.service
/usr/sbin/rcrsyncd
/usr/sbin/rsyncd
/usr/share/doc/packages/rsync
/usr/share/doc/packages/rsync/COPYING
/usr/share/doc/packages/rsync/NEWS
/usr/share/doc/packages/rsync/README
/usr/share/doc/packages/rsync/tech_report.tex
/usr/share/man/man1/rsync.1.gz
/usr/share/man/man5/rsyncd.conf.5.gz</screen>
            <para>Additionally, it contains some extra metadata. This
                metadata should include but it is not limited to:</para>
            <orderedlist>
                <listitem>
                    <para>Name</para>
                </listitem>
                <listitem>
                    <para>Summary</para>
                </listitem>
                <listitem>
                    <para>Description</para>
                </listitem>
                <listitem>
                    <para>License</para>
                </listitem>
                <listitem>
                    <para>etc.</para>
                </listitem>
            </orderedlist>
            <para>As an example, the metadata for
                    <application>rsynch</application> look as
                follows:</para>
            <screen>$ rpm -qpi rsync-3.1.2-1.5.x86_64.rpm
            
Name        : rsync
Version     : 3.1.2
Release     : 1.5
Architecture: x86_64
Install Date: Wed 26 Oct 2016 01:31:12 PM CEST
Group       : Productivity/Networking/Other
Size        : 636561
License     : GPL-3.0+
Signature   : RSA/SHA256, Mon 17 Oct 2016 02:32:40 AM CEST, Key ID b88b2fd43dbdc284
Source RPM  : rsync-3.1.2-1.5.src.rpm
Build Date  : Mon 17 Oct 2016 02:32:26 AM CEST
Build Host  : lamb18
Relocations : (not relocatable)
Packager    : http://bugs.opensuse.org
Vendor      : openSUSE
URL         : http://rsync.samba.org/
Summary     : Versatile tool for fast incremental file transfer
Description :
Rsync is a fast and extraordinarily versatile file  copying  tool. It can copy
locally, to/from another host over any remote shell, or to/from a remote rsync
daemon. It offers a large number of options that control every aspect of its
behavior and permit very flexible specification of the set of files to be
copied. It is famous for its delta-transfer algorithm, which reduces the amount
of data sent over the network by sending only the differences between the
source files and the existing files in the destination. Rsync is widely used
for backups and mirroring and as an improved copy command for everyday use.
Distribution: openSUSE Tumbleweed</screen>
            <para>To get a list of additional packages which the respective
                package requires to be installed to work, use the command
                    <command>Requires</command> as shown below:</para>
            <screen>$ rpm -qp --requires rsync-3.1.2-1.5.x86_64.rpm
/bin/sh
/usr/bin/perl
config(rsync) = 3.1.2-1.5
coreutils
diffutils
fillup
grep
libacl.so.1()(64bit)
libacl.so.1(ACL_1.0)(64bit)
libc.so.6()(64bit)
libc.so.6(GLIBC_2.10)(64bit)
libc.so.6(GLIBC_2.14)(64bit)
libc.so.6(GLIBC_2.15)(64bit)
libc.so.6(GLIBC_2.2.5)(64bit)
libc.so.6(GLIBC_2.3)(64bit)
libc.so.6(GLIBC_2.3.4)(64bit)
libc.so.6(GLIBC_2.4)(64bit)
libc.so.6(GLIBC_2.6)(64bit)
libc.so.6(GLIBC_2.7)(64bit)
libc.so.6(GLIBC_2.8)(64bit)
libpopt.so.0()(64bit)
libpopt.so.0(LIBPOPT_0)(64bit)
libslp.so.1()(64bit)
rpmlib(CompressedFileNames) &lt;= 3.0.4-1
rpmlib(PayloadFilesHavePrefix) &lt;= 4.0-1
rpmlib(PayloadIsLzma) &lt;= 4.4.6-1
sed
systemd</screen>
            <para>As an example, a package may need a library, or an
                executable that is called during runtime.</para>
            <para>To get a list of information the respective package
                provides for other packages to work, use the command
                    <command>Provides</command> as shown below:</para>
            <screen>$ rpm -qp --provides rsync-3.1.2-1.5.x86_64.rpm
config(rsync) = 3.1.2-1.5
rsync = 3.1.2-1.5
rsync(x86-64) = 3.1.2-1.5</screen>
        </sect2>
        <sect2 xml:id="sec.installing_packages">
            <title>Installing Packages</title>
            <para>When a package is installed, the content (or list of
                files) is placed on the system at the location of each file
                path relative to the root (<filename>/</filename>) folder. </para>
            <para>Additionally, the metadata of the package (and the fact
                that it is installed) is recorded in a system-wide database
                located in <filename>/var/lib/rpm</filename>, which is
                managed by the <application>rpm</application> tool, the
                utility that manages packages at the lowest level.</para>
            <para>Packages can be installed with the
                    <application>rpm</application> tools:</para>
            <screen>$ rpm -U rsync-3.1.2-1.5.x86_64.rpm</screen>
            <para>When you do this, you can perform the same queries
                without specifying the <command>-p</command> option and
                using what is called the NVRA
                (name-version-release-architecture,
                    <package>rsync-3.1.2-1.5.x86_64</package>) or a subset
                of it. For example, you can just name it (rsync). </para>
            <screen>$ rpm -q --provides rsync</screen>
            <para>The <application>rpm</application> tool will not help you
                if the dependencies of the package are not met at
                installation time. It will then refuse to install the
                package to avoid having the system in an inconsistent
                state.</para>
            <para>Features like automatically finding the required packages
                and retrieving them, are implemented in higher-level tools
                like <application>zypper</application>.</para>
        </sect2>
        <sect2 xml:id="sec.dependency">
            <title>Dependency Matching</title>
            <para>The section <xref linkend="sec.anatomy"/> explains that a
                package contains a list of <command>Requires</command> and
                    <command>Provides</command>. Those are not package
                names, but arbitrary symbols. A package can require or
                provide any string of text. </para>
            <para>The main rule is that each package provides its own name.
                This means the rsync package <command>Provides:
                    rsync</command>.</para>
            <para>You have also learned that rsync requires
                    <package>/bin/sh</package>. While this looks like a
                file name, in our context it is an arbitrary symbol and the
                meaning is given by the whole distribution. The reason why
                it does not require a package named <package>sh</package>
                instead is that it provides a layer of indirection that
                makes the system cohesive. </para>
            <para><package>/bin/sh</package> is a capability provided by
                the <package>bash</package> package. This allows rsync to
                depend on any shell implementation as long as it provides
                that symbol. </para>
            <para>The distribution build system will scan all executables a
                package installs in a system and inject automatically those
                    <command>Provides</command>. The packager does not need
                to take care of them.</para>
            <para>The same is done with libraries. As an example,
                    <package>rsync</package> does not depend on the
                    <package>glibc</package> package. When
                    <package>glibc</package> was built, the build system
                scanned the content, found
                    <package>/lib64/libc.so.6</package> and injected a
                    <command>Provides: libc.so.6()(64bit)</command> into
                the <package>glibc</package> metadata. In the case of
                shared libraries it is not so important where they are
                located, because the linker configuration takes care of
                that. When the <package>rsync</package> package was built
                    (<package>glibc</package> had to be installed at that
                point to build it), the build system scanned the executable
                    <filename>/usr/lib/rsync</filename> and realized it was
                linked against <package>libc.so.6</package>:</para>
            <screen>$ ldd /usr/bin/rsync
        linux-vdso.so.1 (0x00007ffccb34a000)
        libacl.so.1 => /lib64/libacl.so.1 (0x00007fc406028000)
        libpopt.so.0 => /usr/lib64/libpopt.so.0 (0x00007fc405e1b000)
        libslp.so.1 => /usr/lib64/libslp.so.1 (0x00007fc405c02000)
        libc.so.6 => /lib64/libc.so.6 (0x00007fc405863000)
        libattr.so.1 => /lib64/libattr.so.1 (0x00007fc40565e000)
        libcrypto.so.1.0.0 => /lib64/libcrypto.so.1.0.0 (0x00007fc4051c4000)
        libpthread.so.0 => /lib64/libpthread.so.0 (0x00007fc404fa7000)
        /lib64/ld-linux-x86-64.so.2 (0x00005653cd048000)
        libdl.so.2 => /lib64/libdl.so.2 (0x00007fc404da3000)
        libz.so.1 => /lib64/libz.so.1 (0x00007fc404b8d000)</screen>
            <para>Therefore, it injected Requires: libc.so.6()(64bit) to
                the rsync package.</para>
            <para>Now compare it to other packaging systems. The package
                    <package>musicplayer</package> requires
                    <package>libsound</package>.
                    <filename>/usr/bin/musicplayer</filename> links to
                    <filename>/usr/lib64/libsound.so.5</filename>. At a
                later point in time, <package>musicplayer</package> is
                rebuilt against a newer <package>libsound</package>, which
                is not published. The user installs
                    <package>musicplayer</package> without any issue
                because it only <command>Requires: libsound</command> (as
                in the package name). However, when the user tries to run
                it, he or she gets the following message:</para>
            <screen>$ musicplayer
error while loading shared libraries: libsound.so.7: cannot open shared object file: No such file or directory</screen>

            <para>The layer of indirection of automatically injected
                dependencies prevents this manual work from keeping
                dependencies in synchronization. Packages only provide what
                they really carry (because provides are injected by
                advanced scanners), and packages only require what they
                really need (because requires are injected by scanning
                executables, scripts for shebangs, etc.).</para>

            <para>This allows rpm based distributions to use these
                conventions highly cohesive. It makes upgrades less
                problematic and the danger of breaking your system nearly
                non-existent. At the same time, the conventions and
                indirections between provides and requires allow for
                packages to depend on more abstract capabilities, instead
                of specific package names (which sometimes get renamed,
                split, obsoleted, etc). For example, you can be sure the
                    <package>vim</package> package provides
                    <package>vi</package>.</para>

            <para>There are also other dependencies with more advances
                purposes: <command>Conflicts</command>,
                    <command>Obsoletes</command>, etc. Their names let you
                easily understand what purposes they have.</para>
        </sect2>

        <sect2 xml:id="sec.weak_dependencies">
            <title>Weak Dependencies</title>

            <para>Not everything is as strict as you might think. Sometimes
                a package works better if another package is present.
                Sometimes a package enhances the functionality of another
                package, however in neither case they are required. For
                this purpose, packages can have the following
                dependencies:</para>

            <itemizedlist>
                <listitem>
                    <para><command>Recommends</command>: a soft version of
                        requires. If the recommended packages are not
                        installed, the package will be installed anyway.
                        Higher level tools however may pull automatically
                        recommended packages based on user settings.</para>
                </listitem>
                <listitem>
                    <para>The reverse of this dependency is
                            <command>Supplements</command>. For example a
                        package <package>spellchecker</package> could
                            <command>Supplements</command> an
                            <package>office-suite</package> package.</para>
                </listitem>
                <listitem>
                    <para><command>Suggests</command> and
                            <command>Enhances</command>:the forward and
                        backward version of Recommends and Supplements in a
                        weaker version.</para>
                </listitem>
            </itemizedlist>
        </sect2>

    </sect1>


    <sect1 xml:id="sec.legal_notice">
        <title>Legal Notice</title>
        <para>Copyright &copy;2006â€“ 2017 SUSE LLC and contributors. All
            rights reserved. </para>
        <para>Permission is granted to copy, distribute and/or modify this
            document under the terms of the GNU Free Documentation License,
            Version 1.2 or (at your option) version 1.3; with the Invariant
            Section being this copyright notice and license. A copy of the
            license version 1.2 is included in the section entitled
                <quote>GNU Free Documentation License</quote>.</para>
        <para>SUSE, the SUSE logo and YaST are registered trademarks of
            SUSE LLC in the United States and other countries. For SUSE
            trademarks, see <link
                xlink:href="http://www.suse.com/company/legal/"
                >http://www.suse.com/company/legal/</link>. Linux is a
            registered trademark of Linus Torvalds. All other names or
            trademarks mentioned in this document may be trademarks or
            registered trademarks of their respective owners.</para>
        <para>This article is part of a series of documents called "SUSE
            Best Practices". The individual documents in the series were
            contributed voluntarily by SUSE's employees and by third
            parties.</para>
        <para>The articles are intended only to be one example of how a
            particular action could be taken. They should not be understood
            to be the only action and certainly not to be the action
            recommended by SUSE. Also, SUSE cannot verify either that the
            actions described in the articles do what they claim to do or
            that they don't have unintended consequences.</para>
        <para>Therefore, we need to specifically state that neither SUSE
            LLC, its affiliates, the authors, nor the translators may be
            held liable for possible errors or the consequences thereof.
            Below we draw your attention to the license under which the
            articles are published.</para>
    </sect1>
    <?pdfpagebreak style="suse2013" formatter="fop"?>
    <xi:include href="license-gfdl.xml"/>
</article>
