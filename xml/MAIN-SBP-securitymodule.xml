<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<!DOCTYPE article [
<!ENTITY % entity SYSTEM "entity-decl.ent">
%entity;
]>
<article xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="art.sbp.securitymodule" xml:lang="en">
    <info>
        <title>Security Module in SUSE Linux Enterprise 11</title>
        <subtitle>Build TLS 1.2 Compliant Infrastructures</subtitle>
        <orgname>SUSE Best Practices</orgname>
        <productname>SUSE Linux Enterprise Server</productname>
        <productnumber>11</productnumber>
        <author>
            <personname>
                <firstname>Mark</firstname>
                <surname>Post</surname>
            </personname>
            <affiliation>
                <jobtitle>Software Engineer Consultant</jobtitle>
                <orgname>&suse;</orgname>
            </affiliation>
        </author>

        <abstract>
            <para>For some time now, governmental agencies around the
                world, such as the United States National Institute of
                Standards and Technology (NIST) (<link
                    xlink:href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-52r1.pdf"
                    >NIST SP 800-52 Rev.1</link>) and the German Bundesamt
                f√ºr Sicherheit in der Informationstechnik (BSI) (<link
                    xlink:href="https://www.bsi.bund.de/SharedDocs/Downloads/DE/BSI/Publikationen/TechnischeRichtlinien/TR02102/BSI-TR-02102-2.pdf"
                    >BSI TR-02102-2</link>) have issued guidance to use
                Version 1.2 of the Transport Layer Security (TLS)
                cryptographic protocol as a minimum standard for
                encryption. This is primarily important for HTTPS
                encryption of web traffic, although other uses are affected
                as well, such as e-mail. </para>

            <para>Allowing SUSE`s customers to follow this guidance without
                affecting the stability and usability of their systems is
                challenging. In this paper we will be providing some
                background to illustrate those challenges and then show how
                they have been addressed. </para>
        </abstract>
    </info>

    <sect1 xml:id="sec.background">
        <title>Background</title>
        <para>As the name indicates, SUSE Linux Enterprise is intended for
            use by enterprises. One of the main attributes valued by
            enterprises in software is stability. SUSE achieves this in a
            number of ways, one of which is to not change versions of its
            software packages unless there is no other alternative. When
            SUSE Linux Enterprise 11 became generally available in 2009,
            OpenSSL 0.9.8 was the package included to provide encryption
            for the various other software that used it. </para>

        <para>It was when the requirement for TLS 1.2 came along that a
            conflict arose between that need and the goal of maintaining
            the same software versions, and hence stability. OpenSSL
            version 0.9.8 simply did not provide an implementation of TLS
            1.1 or 1.2 and never would provide it. </para>

        <para>In order to provide TLS 1.2 with OpenSSL, SUSE would have to
            provide version 1.0 or higher. Such an update to a more recent
            OpenSSL version would have been nearly impossible, as OpenSSL
            is notoriously incompatible with itself when moving between
            versions. An OpenSSL version upgrade would trigger a rebuild of
            a significant number of other packages in SUSE Linux Enterprise
            11 - and subsequently would require a high number of updates to
            be installed on all our customers` production systems. Worse, a
            version upgrade would break third party applications. This was
            considered unacceptable, so another approach was taken.</para>

        <para>Fortunately, there are cryptographic libraries other than
            OpenSSL, and amongst those it was decided that Mozilla`s
            Network Security Services (<link
                xlink:href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS"
                >NSS</link>) would be the best option: </para>

        <para>
            <itemizedlist>
                <listitem>
                    <para>The library is stable and proven to work, as it
                        provides HTTPS support (including TLS) for the
                        Firefox web browser. </para>
                </listitem>
                <listitem>
                    <para>An Apache module already exists, which is derived
                        from mod_ssl and thus easy to use for
                        administrators used to mod_ssl. </para>
                </listitem>
                <listitem>
                    <para>The NSS library is already part of SUSE Linux
                        Enterprise 11, and support for TLS 1.2 can be
                        provided easily with full backward
                        compatibility.</para>
                </listitem>
            </itemizedlist>
        </para>

        <para>In late November of 2013, SUSE shipped updated versions of
            libfreebl3, libsoftokn3, mozilla-nspr, and mozilla-nss, along
            with a new package apache2-mod_nss in the maintenance channels
            for SUSE Linux Enterprise 11 Service Pack (SP) 2 and SP3. While
            this took care of the web server and web browser cases, it did
            not do the same for other network services such as e-mail or
            tools such as wget and curl.</para>
    </sect1>

    <sect1 xml:id="sec.challenges">
        <title>More Challenges</title>

        <para>The e-mail server that is included with SUSE Linux
            Enterprise, Postfix, does not work with NSS, only with OpenSSL.
            Simply shipping both OpenSSL 0.9.8 and OpenSSL 1.0 was no
            option because it was all too likely that customers would
            install both versions of OpenSSL on their systems. Because of
            the incompatibilities discussed earlier, this would almost
            certainly have lead to all sorts of application crashes. </para>

        <para> The lack of SUSE provided packages built against OpenSSL 1.0
            lead to some customers attempting to recompile them from
            source, with mixed success. Worse, the recompiled packages were
            not supported by SUSE and could affect the supportability for
            the entire system. Further, customers would need some way of
            rebuilding their in-house written applications against OpenSSL
            1.0 to be compliant. Clearly something more was needed.</para>
    </sect1>

    <sect1 xml:id="sec.roundtwo">
        <title>Round Two</title>
        <para>In August of 2014, SUSE released the <quote>SUSE Linux
                Enterprise 11 Security Module</quote>, providing
            enhancements to SUSE Linux Enterprise 11 SP3, and later SP4.
            Available to all customers with a SUSE Linux Enterprise Server
            subscription, this allows customers and partners to build TLS
            1.2 compliant infrastructures beyond the HTTPS protocol. The
            packages in the Security Module will be supported in the same
            way and for the same period of time as the other packages
            shipped with SUSE Linux Enterprise 11 <footnote>
                <para> 1 <link xlink:href="https://www.suse.com/lifecycle/"
                    />
                </para>
            </footnote>. </para>

        <para> In this context the term <quote>module</quote> can be
            somewhat confusing but it comes from the <quote>optional
                modules</quote> that were introduced with SUSE Linux
            Enterprise 12 <footnote>
                <para>2 <link
                        xlink:href="https://www.suse.com/products/server/features/modules.html"
                    /></para>
            </footnote>. Essentially the Security Module is an additional
            package and maintenance repository for use by YaST or zypper.
            There are no DVDs to order or ISO images to download. At this
            time, there are a total of 31 packages available in the
            Security Module:</para>

        <screen>curl-openssl1
cyrus-sasl-openssl1
cyrus-sasl-openssl1-32bit
cyrus-sasl-openssl1-crammd5
cyrus-sasl-openssl1-digestmd5
cyrus-sasl-openssl1-gssapi
cyrus-sasl-openssl1-ntlm
cyrus-sasl-openssl1-otp
cyrus-sasl-openssl1-plain
libcurl4-openssl1
libcurl4-openssl1-32bit
libldap-openssl1-2_4-2
libldap-openssl1-2_4-2-32bit
libopenssl1_0_0
libopenssl1_0_0-32bit
libopenssl1-devel
openldap2-client-openssl1
openssh-openssl1
openssh-openssl1-helpers
openssl1
openssl1-doc
openvpn-openssl1
openvpn-openssl1-down-root-plugin
perl-Crypt-SSLeay-openssl1
perl-Net-SSLeay-openssl1
postfix-openssl1
postfix-openssl1-devel
postfix-openssl1-doc
postfix-openssl1-mysql
postfix-openssl1-postgresql
wget-openssl1</screen>

        <para>
            <simplelist>
                <member> curl-openssl1</member>
                <member>cyrus-sasl-openssl1</member>
                <member>cyrus-sasl-openssl1-32bit</member>
                <member>cyrus-sasl-openssl1-crammd5</member>
                <member>cyrus-sasl-openssl1-digestmd5</member>
                <member>cyrus-sasl-openssl1-gssapi</member>
                <member>cyrus-sasl-openssl1-ntlm</member>
                <member>cyrus-sasl-openssl1-otp</member>
                <member>cyrus-sasl-openssl1-plain</member>
                <member>libcurl4-openssl1</member>
                <member>libcurl4-openssl1-32bit</member>
                <member>libldap-openssl1-2_4-2</member>
                <member>libldap-openssl1-2_4-2-32bit</member>
                <member>libopenssl1_0_0</member>
                <member>libopenssl1_0_0-32bit</member>
                <member>libopenssl1-devel</member>
                <member>openldap2-client-openssl1</member>
                <member>openssh-openssl1</member>
                <member>openssh-openssl1-helpers</member>
                <member>openssl1</member>
                <member>openssl1-doc</member>
                <member>openvpn-openssl1</member>
                <member>openvpn-openssl1-down-root-plugin</member>
                <member>perl-Crypt-SSLeay-openssl1</member>
                <member>perl-Net-SSLeay-openssl1</member>
                <member>postfix-openssl1</member>
                <member>postfix-openssl1-devel</member>
                <member>postfix-openssl1-doc</member>
                <member>postfix-openssl1-mysql</member>
                <member>postfix-openssl1-postgresql</member>
                <member>wget-openssl1openssh-openssl1-helpers</member>
            </simplelist>
        </para>

        <para>As you can see there are packages containing executables,
            run-time libraries, and development files. They are also named
            to be easily distinguishable from the versions built against
            OpenSSL 0.9.8. With a few exceptions, the OpenSSL 1.0 packages
                <emphasis role="bold">may</emphasis> be installed
            concurrently with the versions using OpenSSL 0.9.8. Those
            exceptions that may not be installed concurrently are:</para>

        <itemizedlist>
            <listitem>
                <para>libopenssl1-devel</para>
            </listitem>
            <listitem>
                <para>openssh-openssl1</para>
            </listitem>
            <listitem>
                <para>openssl1-doc</para>
            </listitem>
            <listitem>
                <para>perl-Crypt-SSLeay-openssl1</para>
            </listitem>
            <listitem>
                <para>perl-Net-SSLeay-openssl1</para>
            </listitem>
            <listitem>
                <para>postfix-openssl1</para>
            </listitem>
            <listitem>
                <para>postfix-openssl1-devel</para>
            </listitem>
        </itemizedlist>

        <para>For the OpenSSH and Postfix packages, it does not make sense
            to have more than one version installed since they provide a
            service for the entire system, not just for one user or
            application. For the Perl and -devel packages a conflict is
            unavoidable as the header and .so files are in the same
            locations. This means that only the OpenSSL 0.9.8 or the
            OpenSSL 1.0 version of these packages may be installed on a
            given system at one time.</para>
    </sect1>

    <sect1 xml:id="sec.getsoftware">
        <title>Getting the software</title>

        <para>Since all the packages reside in a single repository or
            maintenance channel, there are just two major steps that need
            to be taken first:</para>

        <orderedlist>
            <listitem>
                <para>Verify or get access to the Security Module. See
                    Appendix A for the gory details.</para>
            </listitem>
            <listitem>
                <para>Install the packages you need using either YaST
                        (<userinput>yast sw_single</userinput>) or the
                        <userinput>zypper install</userinput> command, for
                    example </para>
                <para>
                    <userinput>zypper in curl-openssl1
                        wget-openssl1</userinput>
                </para>
                <para>Both YaST and zypper will automatically determine if
                    any other packages are needed to satisfy dependencies.
                    In any case you will be prompted to confirm the
                    installation.</para>
            </listitem>
        </orderedlist>

        <note>
            <title>No Automatic Change to OpenSSL 1</title>
            <para>Note that adding this channel or installing the SUSE
                provided packages does not automatically change any other
                existing applications to use OpenSSL 1. Unless ported or
                rebuilt by the vendor they will still use the OpenSSL 0.9.8
                libraries. For C or C++ applications developed in-house you
                will need to build OpenSSL 1 versions as described in the
                section on how to use the development packages.</para>
        </note>
    </sect1>

    <sect1 xml:id="sec.usingpack">
        <title>Using the packages</title>
        <sect2 xml:id="sec.interactpack">
            <title>The Interactive Packages</title>
            <sect3 xml:id="sec.curlwget">
                <title>curl-openssl1 and wget-openssl1</title>
                <para>If you have chosen to install the curl-openssl1 or
                    wget-openssl1 packages, you now have a choice as to
                    which one should be the system-wide default when
                    someone simply enters the <userinput>curl</userinput>
                    command or <userinput>wget</userinput> command. Setting
                    or changing this is accomplished through the use of the
                    SUSE alternatives system (see <quote>man 8
                        update-alternatives</quote> for more information).
                    We will be using the curl package for our examples, but
                    as you would expect, the same can and should be done
                    for the wget package.</para>

                <para>To see which version of curl is the system default,
                    enter the following command:</para>

                <screen>update-alternatives --display curl</screen>
                <para>or</para>
                <screen>update-alternatives --display wget-openssl1</screen>

                <para>You should see output similar to this:</para>

                <screen># update-alternatives --display curl
curl - status is auto.
 link currently points to /usr/bin/curl.openssl1
/usr/bin/curl.openssl0 - priority 15
/usr/bin/curl.openssl1 - priority 20
Current `best' version is /usr/bin/curl.openssl1.</screen>

                <para>If this is not the state you want, you can change it
                    using the <userinput>update-alternatives
                        --set</userinput> command:</para>

                <screen>update-alternatives --set curl /usr/bin/curl.openssl0
Using '/usr/bin/curl.openssl0' to provide 'curl'.</screen>

                <para>You can then re-issue the command with
                        <userinput>--display</userinput>:</para>

                <screen># update-alternatives --display curl
curl - status is manual.
 link currently points to /usr/bin/curl.openssl0
/usr/bin/curl.openssl0 - priority 15
/usr/bin/curl.openssl1 - priority 20
Current `best' version is /usr/bin/curl.openssl1.</screen>

                <note>
                    <title>Status Change</title>
                    <para>Note that besides the link being updated, the
                            <quote>status</quote> of it has been changed
                        from <quote>auto</quote> to <quote>manual</quote>.
                        That means that the
                            <userinput>curl.openssl0</userinput> command
                        will remain the default until someone with root
                        user authority issues another
                            <userinput>update-alternatives --set
                            curl</userinput> or
                            <userinput>update-alternatives --auto curl
                        </userinput>command.</para>
                </note>

                <para>Individual users will need to use shell aliases if
                    they want something other than the system
                    default.</para>
            </sect3>

            <sect3 xml:id="sec.openssl1">
                <title>openssl1</title>
                <para>The openssl package contains two commands that might
                    be of interest to users or system administrators,
                        <userinput>c_rehash</userinput> and
                        <userinput>openssl</userinput>. The openssl1
                    package has renamed those two commands to
                        <userinput>c_rehash1</userinput> and
                        <userinput>openssl1</userinput>. Anyone who wants
                    to be sure they are executing the OpenSSL 1 versions
                    must use the new names explicitly. Note that the
                        <userinput>c_rehash1</userinput> command can
                    generate signatures for both OpenSSL 0.9.8 and OpenSSL
                    1, but the<userinput>c_rehash</userinput> command
                    cannot.</para>
            </sect3>

            <sect3 xml:id="sec.libldap">
                <title>libldap-openssl1</title>

                <para>The libldap-openssl1 package contains commands such
                    as <userinput>ldapadd</userinput>,
                        <userinput>ldapsearch,</userinput> etc. They are
                    located in <filename>/opt/suse/bin</filename> so they
                    will not be used by default. If you want to execute
                    them by default you can either specify the fully
                    qualified path to the commands, modify your PATH
                    environment variable to contain
                        <filename>/opt/suse/bin</filename> before
                        <filename>/usr/bin</filename>, or create aliases
                    that point to the newer version. </para>

                <para>Some consideration is being given to modify this
                    package to use the same update-alternatives method as
                    the curl and wget packages. If and when that happens,
                    the commands in <filename>/opt/suse/bin</filename> will
                    be moved into a different package, most likely named
                    openldap2-client-openssl1. This will make the contents
                    and naming similar to what is being done now for the
                    OpenSSL 0.9.8 package, openldap2-client.</para>
            </sect3>

            <sect3 xml:id="sec.openssh">
                <title>openssh-openssl1 and postfix-openssl1</title>
                <para>The OpenSSH and Postfix packages contain both client
                    and server/admin components. Since only one version can
                    be installed at a time, by definition users will not
                    have a choice as to which version they execute.</para>
            </sect3>
        </sect2>

        <sect2 xml:id="sec.serverpack">
            <title>The server packages</title>

            <para>For OpenSSH and Postfix, the post installation scripts
                that are executed by RPM should set up everything needed in
                the configuration files and then restart the services. If
                the services were not running at the time the packages were
                installed, they will <emphasis role="italic">not</emphasis>
                be started automatically. To ensure they are running check
                their status:</para>

            <screen>service sshd status
service postfix status</screen>

            <para>If either or both are not running, start them:</para>

            <screen>service sshd start
service postfix start</screen>

            <para>From this point on, there should be no differences in how
                the services were managed previously.</para>
        </sect2>

        <sect2 xml:id="sec.developmentpack">
            <title>The development packages</title>

            <para>The two development packages will only be of interest to
                customers that are doing in-house development of C or C++
                software that uses these libraries, or installing vendor
                packages that require all or part of their source code to
                be compiled and linked to these libraries. If the
                corresponding -devel packages from OpenSSL 0.9.8 were never
                installed on a particular system, there should be no need
                to install the OpenSSL 1.0 versions either.</para>

            <para>Because only one set of the development packages can be
                installed at any one time, it will be a bit cumbersome to
                try to do development against both versions on the same
                system. Switching between the two will require uninstalling
                one version and re-installing the other, as needed.</para>

            <para>Depending on what libraries your OpenSSL 1 application
                requires, you might need to also install one or all of the
                following packages:</para>

            <itemizedlist>
                <listitem>
                    <para>libldap-openssl1-2_4-2</para>
                </listitem>
                <listitem>
                    <para>cyrus-sasl-openssl1</para>
                </listitem>
                <listitem>
                    <para>libcurl4-openssl1</para>
                </listitem>
                <listitem>
                    <para>cyrus-sasl-openssl1-plain</para>
                </listitem>
                <listitem>
                    <para>cyrus-sasl-openssl1-gssapi</para>
                </listitem>
                <listitem>
                    <para>cyrus-sasl-openssl1-digestmd5</para>
                </listitem>
            </itemizedlist>

            <para>If your application does not require them, then they will
                only be installed if needed by other packages such
                postfix-openssl1, etc.</para>

            <para>These OpenSSL 1 libraries are located in
                    <filename>/opt/suse/lib64</filename> or
                    <filename>/opt/suse/lib</filename> on 32bit systems.
                This allows them to be installed concurrently with the
                OpenSSL 0.9.8 versions. Because they have exactly the same
                file names as the OpenSSL 0.9.8 libraries in
                    <filename>/usr/lib64</filename> and
                    <filename>/usr/lib</filename>, it is important to make
                sure that your software build processes are referencing the
                correct versions.</para>

            <para>The way to accomplish this is by telling the
                compiler/linker where to find the desired version. So, when
                compiling and linking software against OpenSSL 1, pass the
                following parameters to the <userinput>gcc</userinput>
                command:</para>

            <para>
                <userinput>-Wl,-rpath,/opt/suse/lib64</userinput>
            </para>

            <para>or on 32bit systems:</para>

            <para>
                <userinput>-Wl,-rpath,/opt/suse/lib</userinput>
            </para>

            <para>This causes both the application and libraries that are
                built to look for the libraries in
                    <filename>/opt/suse/lib64</filename> or
                    <filename>/opt/suse/lib</filename> first, and in the
                regular system locations later.</para>

            <para>This can most reliably be done by updating whatever
                    <quote>make file</quote> is being used to build the
                software. Note that this must be done for any <emphasis
                    role="strong">libraries</emphasis> being built, as well
                as binary executables. Having a library pointing to the
                wrong version will be just as wrong as having the program
                being executed pointing to the wrong version.</para>

            <para>When compiling and linking against OpenSSL 0.9.8, you
                have a choice; either leave the
                    <userinput>-Wl,-rpath</userinput> out entirely, or
                point to <filename>/usr/lib64</filename> or on 32bit
                systems <filename>/usr/lib</filename>.</para>

            <para>To confirm if your software has been built correctly,
                execute the following command against it:</para>

            <screen>readelf ¬≠a /path/to/your/binaryorlibrary | grep RUNPATH</screen>

            <para>You should see something similar to this example:</para>

            <screen>readelf -a /usr/lib/postfix/smtp | grep RUNPATH
0x000000000000001d (RUNPATH)            Library runpath: [/opt/suse/lib64]</screen>

            <para>To confirm if your application is not referencing any of
                the OpenSSL 0.9.8 libraries, use the
                    <userinput>/usr/bin/ldd</userinput> command as in this
                example:</para>

            <screen>ldd /usr/lib/postfix/smtp | grep /libssl.so.0
ldd /usr/lib/postfix/smtp | grep /libcrypto.so.0</screen>

            <para>You should not see any output from either of those
                commands when run against your application files. If you
                do, it means that your application was linked against the
                wrong version of OpenSSL and you need to reexamine your
                build processes.</para>
        </sect2>
    </sect1>

    <sect1 xml:id="sec.appendix">
        <title>Appendix A</title>

        <sect2 xml:id="sec.checksecmodule">
            <title>Checking if the Security Module repository is already
                defined</title>

            <para>Issue the following command as the root user<footnote>
                    <para>3 Note that all of this work can be done via YaST
                        (yast repositories) as well.</para>
                </footnote>:</para>
            <screen>zypper repos | grep Security</screen>

            <para>If the repository is defined, you should see something
                similar to this:</para>

            <screen>17 | nu_novell_com:SLE11-Security-Module | SLE11-Security-Module | No | Yes</screen>

            <para>If it is defined, skip to the section on enabling the
                Security Module Repository. If the repository is not
                defined, proceed with the following section on registering
                your system. </para>
        </sect2>

        <sect2 xml:id="sec.register">
            <title>Registering the system</title>

            <para>If your initial command</para>
            <screen>zypper repos | grep Security</screen>

            <para>showed nothing in response, then you will need to
                register, or re-register, your system with the SUSE
                Customer Center or your own local Subscription Management
                Tool (SMT) server. This can be accomplished via YaST
                    (<userinput>yast inst_suse_register</userinput>) or the
                    <userinput>suse_register</userinput> command. System
                administrators that are not already familiar with
                    <userinput>suse_register</userinput> should use YaST to
                register the system. </para>

            <para>
                <note>
                    <title>YaST Registration</title>
                    <para>We are deliberately not giving the syntax to use
                            <userinput>suse_register</userinput>. If it's
                        not something you already know, please use
                        YaST.</para>
                </note>
            </para>

            <para>Once the system has been registered, you should be able
                to see the Security Module repository as already discussed.
                If you do not, contact the Customer Resolution Team for
                assistance.</para>

            <para>In EMEA:
                <email>Customer_CenterEMEA@novell.com</email></para>
            <para>In all other countries:
                    <email>CustomerResolution@novell.com</email></para>

        </sect2>

        <sect2 xml:id="sec.enablesecmodule">
            <title>Enabling the Security Module Repository</title>

            <para>Once the Security Module is defined, then all you should
                have to do is enable it and enable automatic refreshes.
                Re-issue the following command as the root user:</para>
            <screen>zypper repos | grep Security</screen>

            <para>The fourth column is now the one of particular interest.
                It shows whether the repository is enabled or not. That is,
                whether YaST or zypper should look at this repository to
                satisfy requests or not.</para>

            <screen><emphasis role="strong">17</emphasis> | nu_novell_com:SLE11-Security-Module | SLE11-Security-Module | <emphasis role="strong">No</emphasis> | Yes</screen>

            <para>Our example shows that it is <emphasis role="italic"
                    >not</emphasis> enabled, so we must change that. The
                easiest way is by using the <userinput>zypper
                    modifyrepo</userinput> command with the repository ID
                shown in column 1. In our example that is 17:</para>

            <screen>zypper modifyrepo -e 17</screen>

            <para>Substitute whatever repository ID that zypper shows on
                your system for the 17 we have used in our example. You
                should see a message like this:</para>

            <screen>Repository 'nu_novell_com:SLE11-Security-Module' has been successfully enabled.</screen>

            <para>To verify, re-issue the <userinput>zypper
                    repos</userinput> command:</para>

            <screen>zypper repos | grep Security
                17 | nu_novell_com:SLE11-Security-Module | SLE11-Security-Module | <emphasis role="strong">Yes</emphasis> | Yes</screen>
        </sect2>

        <sect2 xml:id="sec.autorefresh">
            <title>Enabling automatic refreshes</title>

            <para>The last column in the display shows whether or not
                zypper will automatically refresh the status of the
                repository or not. Ensuring that this is set to
                    <quote>Yes</quote> is important so that any new or
                updated packages in the Security Module will show up as
                available updates.</para>

            <screen>17 | nu_novell_com:SLE11-Security-Module | SLE11-Security-Module | Yes | <emphasis role="strong">Yes</emphasis></screen>

            <para>Our example shows that it is enabled. If yours is
                    <emphasis role="italic">not</emphasis> then issue the
                following command:</para>

            <screen>zypper modifyrepo -r 17</screen>

            <para>Again, substitute whatever repository ID that zypper
                shows on your system. If you then display your repositories
                again you should see a <quote>Yes</quote> in the last
                column, and you have completed this task.</para>

        </sect2>


    </sect1>


    <?pdfpagebreak style="suse2013" formatter="fop"?>

    <xi:include href="license-gfdl.xml"/>

</article>
