<?xml version="1.0" encoding="UTF-8"?>
<!--<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>-->
<!DOCTYPE article [
<!ENTITY % entity SYSTEM "entity-decl.ent">
%entity;
]>

<article role="sbp" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="art-sbp-suse-sec-report-21"
 xml:lang="en">

 <info>
  <title>SLSA: Securing the software supply chain</title>
  <productname>All SUSE Products</productname>
  <!--<productnumber>12, 15</productnumber>-->
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
    <dm:url>https://github.com/SUSE/suse-best-practices/issues</dm:url>
    <dm:product></dm:product>
   </dm:bugtracker>
   <dm:editurl>https://github.com/SUSE/suse-best-practices/edit/main/xml/</dm:editurl>
  </dm:docmanager>

  <author>
   <personname>
    <firstname>Marcus</firstname>
    <surname>Meissner, Distinguished Engineer Solutions Security, SUSE</surname>
   </personname>
   <!--      <affiliation>
    <jobtitle>Senior Software Engineer</jobtitle>
    <orgname>SUSE</orgname>
    </affiliation>-->
  </author>

  <!--    <cover role="logos">
   <mediaobject>
   <imageobject>
   <imagedata fileref="suse.svg"/>
   </imageobject>
   </mediaobject>
   <mediaobject>
   <imageobject>
   <imagedata fileref="amd.jpg"/>
   </imageobject>
   </mediaobject>
   </cover>-->

  <date>June XY, 2022</date>

  <abstract>
   <!--
   <para>Securing our software supply chain is a top priority for SUSE to ensure that our customers
   are protected from security risks, known and zero-day vulnerabilities. Ensuring that no threat
   actor can inject malicious code within our build service systems is certified by industry leading
   security certifications. Our teams continually work to certify all SUSE products, and develop
   security solutions to ensure the highest level of trust and reliability for our customers. </para>
   -->
   <para>Learn how SUSE, as a long-time champion and expert of software supply chain security, prepares
    for SLSA L4 certification.</para>
   
   <para><emphasis role="strong">Disclaimer</emphasis>: This document is part of the SUSE Best
    Practices series. All documents published in this series were contributed voluntarily by SUSE
    employees and by third parties. If not stated otherwise inside the document, the articles are
    intended only to be one example of how a particular action could be taken. Also, SUSE cannot
    verify either that the actions described in the articles do what they claim to do or that they
    do not have unintended consequences. All information found in this document has been compiled
    with utmost attention to detail. However, this does not guarantee complete accuracy. Therefore,
    we need to specifically state that neither SUSE LLC, its affiliates, the authors, nor the
    translators may be held liable for possible errors or the consequences thereof. </para>

  </abstract>
 </info>

 <sect1 xml:id="sec-why-slsa">
  <title>Software supply chain security at SUSE</title>

  <para>Securing our software supply chain is a top priority for SUSE to ensure that our customers
   are protected from security risks, known and zero-day vulnerabilities. Ensuring that no threat
   actor can inject malicious code within our build service systems is certified by industry leading
   security certifications. Our teams continually work to certify all SUSE products, and develop
   security solutions to ensure the highest level of trust and reliability for our customers.</para>
  <!-- this para reads strange ... rephrase -->

  <para>A new industry standardization effort named SLSA (Supply chain Levels for Software Artifacts) 
   started by Google and driven by several industry stakeholders strives to cover standardization of the 
   supply chain integrity part of the secure software supply chain.</para>

  <para>SLSA defines four levels of assurance, going from basic requirements at level 1 to strict rules 
   and documentation requirements at assurance level 4.</para>

  <para>While the SLSA standard is still in development, SUSE even now considers it as a great representation 
   of needs for a secure product build environment and we are adjusting our processes and tooling to meet the 
   requirements of the highest assurance level 4.</para>
 </sect1>

 <sect1 xml:id="sec-supplychain">
  <title>Background: Threats to the supply chain and their mitigation</title>

  <para>The software supply chain contains several known points of attack. They are illustrated by the graphic below. 
   For an exhaustive list of threats and their mitigation, refer to <link xlink:href="https://slsa.dev/spec/v0.1/threats"/>.</para>

  <figure>
   <title>Software supply chain and possible threats</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="slsa_threat-sources.svg" width="90%" format="SVG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="slsa_threat-sources.svg" width="30%" format="SVG"/>
    </imageobject>
     <textobject role="description">
   <phrase>Software supply chain and possible threats</phrase>
  </textobject>
   </mediaobject>
  </figure>

  <!-- supply chain and possible angles of attack --> 
  <!-- attacks and countermeasures -->
  <variablelist>
   <varlistentry><term>Source threats</term>
   <listitem><para>Typical source code threats include bad code that introduces vulnerabilities or a compromized source control system. To address bad code injection, SLSA mandates two-person reviews. To prevent source controls from getting compromized, SLSA mandates strong measures to secure the source control systems.</para></listitem>
   </varlistentry>
      <varlistentry><term>Build threats</term>
   <listitem><para>Build threats include code commits to the build that were not tracked by the source control system, a compromized build platform, bypassing the CI/CD system, a compromized package repository and injecting bad packages. Most build threats are mitigated by establishing provenance of all the packages handled by the supply chain. Strong security controls ensure that the build platform cannot be easily compromized.</para></listitem>
   </varlistentry>
      <varlistentry><term>Dependency threats</term>
   <listitem><para>Dependency threats come into play where risky dependencies are used. SLSA addresses this kind of threat by mandating provenance for all artifacts (files, git commints, directories of files, container images, ...) so one would have an indication that this dependency was not build from the proper builder or out of the designated GitHub repository.</para></listitem>
   </varlistentry>
  </variablelist>

 </sect1>

 <sect1 xml:id="sec-slsa-components">
  <title>SLSA components</title>
  <!-- Core parts of SLSA and how they tie in with the supply chain threats -->
  
  <para>SLSA is designed to standardize the four key components of a software supply chain. Learn about the these components, the respective SLSA requirements and wheter and how SUSE's build process meets these requirements today.</para>
  
  <para>For a complete summary of SLSA requirements, refer to the officical SLSA project pages: <link xlink:href="https://slsa.dev/spec/v0.1/requirements"/>.</para>

  <sect2 xml:id="sec-source">
   <title>Source code management</title>
   
   <para>Keeping source code integrity is the key aspect of supply chain integrity. Source code integrity needs to be defended against all threats originating from insider or outsider attacks.</para>
   
   <para>SLSA mandates the following criteria to be met to ensure source code integrity:</para>
   <variablelist>
    <varlistentry><term>Version controlled source</term>
    <listitem>
     <para>Changes to the source must be tracked in a version control system which in turn needs to provide a <emphasis>change history</emphasis> that contains both the identities of the uploader and the reviewers, timestamps of the reviews/submissions, a comprehensive description of the change, its content and parent reviews. The version control system must also provide an <emphasis>immutable reference</emphasis> to each revision. This requirement is met by most current version control systems, e.g. git.</para>
    </listitem>
    </varlistentry>
    <varlistentry><term>Verified revision history</term>
    <listitem>
      <para>A revision's history must be verifiable, i.e. it must contain a time stamp and carry at least one strongly authenticated actor identity. Actors in this context are the auther, submitter or reviewer of a revision. Identities themselves must be verifiable and use a two-step verification process or something similar.</para>
    </listitem>
    </varlistentry>
    <varlistentry><term>Revision and change history are retained indefinitely</term>
    <listitem>
      <para>
       The revision and its change history must be preserved indefinitely and cannot be deleted. Exceptions can be made if there is a legal or policy requirement that mandates the obliteration of this revision/change history.</para>
    </listitem>
    </varlistentry>
    <varlistentry><term>Two-person reviewed</term>
    <listitem>
      <para>Two trusted persons (see above) need to agree to every change in the revision's history before it is submitted. Both of them must be strongly authenticated.</para>
    </listitem>
    </varlistentry>
   </variablelist>
   
   <para>See how SUSE's current software building pipeline with the Open Build Service (OBS) meets the above requirements:</para>
   
   <table>
    <title>SLSA4 Source requirements and SUSE's OBS</title>
    <tgroup cols="4">
     <colspec colname="c1" align="left"/>
     <colspec colname="c2" align="center"/>
     <colspec colname="c3" align="center"/>
     <colspec colname="c4" align="left"/>
    <thead>
     <row>
      <entry>
       Requirement
      </entry>
      <entry>
       Required at SLSA4
      </entry>
      <entry>
       Achieved
      </entry>
      <entry>
       Comment
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       Version controlled
      </entry>
      <entry>
       &#x2713;
      </entry>
      <entry>
       &#x2713;
      </entry>
      <entry>
       Met by OBS
      </entry>
     </row>
     <row>
      <entry>
       Verified history
      </entry>
      <entry>
       &#x2713;
      </entry>
      <entry>
       (&#x2713;)
      </entry>
      <entry>
       Met by OBS, but two-factor user authentication is still missing.
      </entry>
     </row>
     <row>
      <entry>
       Retained indefinitely
      </entry>
      <entry>
       &#x2713;
      </entry>
      <entry>
       &#x2713;
      </entry>
      <entry>
       Met by OBS
      </entry>
     </row>
     <row>
      <entry>
       Two-person reviewed
      </entry>
      <entry>
       &#x2713;
      </entry>
      <entry>
       &#x274c;
      </entry>
      <entry>
       ???
      </entry>
     </row>
    </tbody>
    </tgroup> 
   </table>
  </sect2>
  
  <sect2 xml:id="sec-build">
   <title>Building and build system</title>
   
   <para>
    The next part of the integrity chain is the acutual build process that turns sources to binaries. The entire build process must be secured against any kind of unknown or outside influence to avoid possible tampering with the builds. Builds must be reproducible in order to allow verification and checking of build results.
   </para>
   
   <variablelist>
    <varlistentry><term>Scripted build</term>
     <listitem>
      <para>
       Define all build steps in any kind of build script. Manual interaction is limited to invoking the build script itself.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry><term>Build service</term>
     <listitem>
      <para>
       Some build service runs the build steps. Running builds on developers' workstations does not qualify as a build service.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry><term>Build as code</term>
     <listitem>
      <para>
       Store the build definition and configuration in text files and keep them under the version control. They must be executed by the build service.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry><term>Ephemeral environment</term>
     <listitem>
      <para>
       Build steps are run in an ephemeral environment such as a VM or container. These environments must not be recycled from a prior build and must be provisioned solely for this build.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry><term>Isolated</term>
     <listitem>
      <para>
       Build steps must be run isolated from each other. No build instance, either prior or concurrent, may influence others.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry><term>Parameterless</term>
     <listitem>
      <para>
       The build is fully and solely defined through the build script and nothing else. Builds cannot be affected by any user input/parameters (except for build entry point and top-level source location).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry><term>Hermetic</term>
     <listitem>
      <para>
       All build steps must be shielded from any kind of external or internal influences. All transitive build steps, sources and dependencies are declared up front with immutable references and ran without network access.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry><term>Reproducible</term>
     <listitem>
      <para>
       When a build is re-run with identical input, it must yield identical results (bit-by-bit). Builds that cannot meet this requirements must provide a justification why they cannot be made reproducible. This requirement is <emphasis>best effort</emphasis>. 
      </para>
     </listitem>
    </varlistentry>
    
   </variablelist>
   
   <para>See how SUSE's current software building pipeline with the Open Build Service (OBS) meets the above requirements:</para>
     <table>
    <title>SLSA4 Build (process) requirements and SUSE's OBS</title>
    <tgroup cols="4">
     <colspec colname="c1" align="left"/>
     <colspec colname="c2" align="center"/>
     <colspec colname="c3" align="center"/>
     <colspec colname="c4" align="left"/>
    <thead>
     <row>
      <entry>
       Requirement
      </entry>
      <entry>
       Required at SLSA4
      </entry>
      <entry>
       Achieved
      </entry>
      <entry>
       Comment
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       Scripted build
      </entry>
      <entry>
       &#x2713;
      </entry>
      <entry>
       &#x2713;
      </entry>
      <entry>
       Met by OBS
      </entry>
     </row>
     <row>
      <entry>
       Build Service
      </entry>
      <entry>
       &#x2713;
      </entry>
      <entry>
       (&#x2713;)
      </entry>
      <entry>
       Met by OBS
      </entry>
     </row>
     <row>
      <entry>
       Build as code
      </entry>
      <entry>
       &#x2713;
      </entry>
      <entry>
       &#x2713;
      </entry>
      <entry>
       The recipe files defining the build process are part of the sources of the individual packages. The build environment configuration (<emphasis>project config</emphasis>) is also under source control.
      </entry>
     </row>
     <row>
      <entry align="left">
       Ephemeral environment
      </entry>
      <entry>
       &#x2713;
      </entry>
      <entry>
       &#x274c;
      </entry>
      <entry align="left">
       Met by OBS (builds in KVM)
      </entry>
     </row>
     <row>
      <entry align="left">
       Isolated
      </entry>
      <entry>
       &#x2713;
      </entry>
      <entry>
       &#x2713;
      </entry>
      <entry align="left">
       Met by OBS (builds in KVM)
      </entry>
     </row>
     <row>
      <entry align="left">
       Parameterless
      </entry>
      <entry>
       &#x2713;
      </entry>
      <entry>
       (&#x2713;)
      </entry>
      <entry align="left">
       Met by OBS
      </entry>
     </row>
     <row>
      <entry align="left">
       Hermetic
      </entry>
      <entry>
       &#x2713;
      </entry>
      <entry>
       (&#x2713;)
      </entry>
      <entry align="left">
       ??? FIXME: Wording?
      </entry>
     </row>
     <row>
      <entry align="left">
       Reproducible
      </entry>
      <entry>
       &#x25cb;
      </entry>
      <entry>
       ???
      </entry>
      <entry align="left">
       ??? FIXME: Wording?
      </entry>
     </row>
    </tbody>
    </tgroup> 
   </table>
  </sect2>
  
  <sect2 xml:id="sec-provenance">
   <title>Provenance</title>
   
   <para></para>
   
  </sect2>

  <sect2 xml:id="sec-common">
   <title>Common</title>
   
   <para></para>
   
  </sect2> 
 </sect1>

 <sect1 xml:id="sec-slsa-references">
  <title>References</title>
  <para></para>
 </sect1>

 <?pdfpagebreak style="suse2013-sbp" formatter="fop"?>
 <xi:include href="sbp-legal-notice.xml"/>


 <?pdfpagebreak style="suse2013-sbp" formatter="fop"?>
 <xi:include href="license-gfdl.xml"/>


</article>
