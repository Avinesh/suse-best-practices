<?xml version="1.0" encoding="UTF-8"?>
<!--<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>-->
<!DOCTYPE article [
<!ENTITY % entity SYSTEM "entity-decl.ent">
%entity;
]>
<article role="sbp" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="art.sbp.quilting.osc"
    xml:lang="en">
    <info>
        <title>Quilting with OSC</title>
        <subtitle/>
        <productname>SUSE Linux Enterprise Server</productname>
        <!--<productname>SUSE Linux Enterprise Server</productname>-->
        <productnumber/>
        <author>
            <personname>
                <firstname>Josef</firstname>
                <surname>Moellers, Senior Developer SUSE Linux Enterprise Network Services,
                    SUSE</surname>
            </personname>
            <!--<personname>
                <firstname>Josef</firstname>
                <surname>Moellers</surname>
            </personname>
            <affiliation>
                <jobtitle>Senior Developer SUSE Linux Enterprise Network Services</jobtitle>
                <orgname>SUSE</orgname>
            </affiliation>-->
        </author>
        <date><?dbtimestamp format="B d, Y" ?></date>


        <abstract>

            <para>This document leads you through the process of modifying a package using the
                    <command>osc</command> and <command>quilt</command> tools. It also discusses
                simple error cases, based upon the author’s own experiences, but it does not attempt
                to be a full manual or to cover all options. The steps described here should work
                well, but if you encounter any difficulties, you should consult the manuals or ask
                an expert for help. </para>

            <para>This document does not intend to provide a guide for the Open Build Service (OBS).
                If you want to learn more about OBS, visit the project’s web page at <link
                    xlink:href="http://openbuildservice.org/">http://openbuildservice.org/</link>
                and read the specific documentation there <link
                    xlink:href="http://openbuildservice.org/help/"
                    >http://openbuildservice.org/help/</link>
            </para>

        </abstract>

    </info>


    <sect1 xml:id="sec.intro">

        <title>Introduction: Open Build Service and the Tools <command>osc</command> and
                <command>quilt</command></title>

        <para>The Open Build Service command line client <command>osc</command> is a tool developed
            to interact with OBS servers. It provides many functions including: </para>

        <itemizedlist>
            <listitem>
                <para>Creating, modifying and deleting the information (meta data) about projects
                    and packages and downloading or uploading their code and packaging </para>
            </listitem>
            <listitem>
                <para>Managing the repositories or targets that projects or packages build against
                </para>
            </listitem>
            <listitem>
                <para>Preparing and running local builds of packages </para>
            </listitem>
            <listitem>
                <para>Making and managing requests to modify packages in projects (so called Submit
                    Requests) </para>
            </listitem>
        </itemizedlist>


        <para><command>quilt</command> is a software utility for managing a series of changes to the
            source code of any computer program. Such changes are often referred to as
                <quote>patches</quote> or <quote>patch sets</quote>. <command>quilt</command> takes
            an arbitrary number of patches and turns them into a single patch. In doing so,
                <command>quilt</command> makes it easier for other programmers to test and evaluate
            the different changes before they are permanently inserted into the source code. In
            short, <command>quilt</command> allows you to easily manage large numbers of patches by
            keeping track of the changes each patch makes. Patches can be applied, un-applied,
            refreshed, and more. </para>

        <para>To understand how osc and quilt work, a few terms and technologies need to be
            described more in detail:</para>

        <itemizedlist>
            <listitem>
                <para>OBS manages <emphasis role="italic">repositories</emphasis>, such as
                        <code>devel:tools</code>, <code>SUSE:SLE-15:GA</code>, or
                        <code>home:&lt;username></code>. <emphasis role="italic"
                        >Repositories</emphasis> are sometimes also referred to as
                        <emphasis>projects</emphasis>. In this documentation, projects are
                    abbreviated as <code>PRJ</code>.</para>
            </listitem>
            <listitem>
                <para>A <emphasis role="italic">repository</emphasis> contains a set of <emphasis
                        role="italic">packages</emphasis>, such as <package>pam_krb5</package>,
                        <package>ntp</package>, <package>wget</package>, <package>zypper</package>.
                    In this document, packages are abbreviated as <package>PKG</package>. Keep in
                    mind that a package can (and usually will) appear in more than one repository,
                    but for all practical purposes each one is a copy in its own right.</para>
            </listitem>
            <listitem>
                <para>A package consists of a set of files, which contains:</para>
                <itemizedlist>
                    <listitem>
                        <para>at least a <filename>spec</filename> file,</para>
                    </listitem>
                    <listitem>
                        <para>an archive of <emphasis role="italic">pristine sources</emphasis> –
                            these are the <quote>original</quote> sources for the package without
                            any patches applied – possibly accompanied by a
                                <filename>signature</filename> file,</para>
                    </listitem>
                    <listitem>
                        <para>a <filename>changes</filename> file,</para>
                    </listitem>
                    <listitem>
                        <para>possibly a set of <emphasis role="italic"/>patches which are to be
                            applied in a given sequence, the order being defined by the
                                <filename>spec</filename> file, and</para>
                    </listitem>
                    <listitem>
                        <para>sometimes additional files, which are not part of the sources or which
                            control some aspects of the building process, for example an
                                <filename>rpmlintrc</filename> file.</para>
                    </listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>

        <para>While there exists only <emphasis role="strong">one</emphasis> Open Build Service, it
            maintains two separate collections, or APIs (as they are called in the documentation) of
            repositories:</para>

        <itemizedlist>
            <listitem>
                <para>the <emphasis role="italic">external</emphasis> build service at <link
                        xlink:href="https://api.opensuse.org">https://api.opensuse.org</link> which
                    can be used by everyone, and</para>
            </listitem>
            <listitem>
                <para>the <emphasis role="italic"/>internal build service at <link
                        xlink:href="api.suse.de">api.suse.de</link>where the SUSE products are
                    maintained and which only SUSE employees can access using their log in
                    credentials.</para>
            </listitem>
        </itemizedlist>

        <note>
            <title>External Build Service</title>
            <para>By default, the <command>osc</command> command works on the external build service
                only. To make it work on the internal build service, you need to add the special
                option with argument <option>-A int</option>. As this paper focuses on the external
                API of the Open Build Service, only the plain <command>osc</command> command is
                used.</para>
        </note>

        <para>When you log in to the <link xlink:href="api.opensuse.org">api.opensuse.org</link> web
            site, you can view all projects available in the external build service. Likewise, when
            you log in to the <link xlink:href="api.suse.de">api.suse.de</link> web site, you can
            view the existing projects in the internal build service.</para>

        <para>This document guides you through the process of modifying a package by updating it to
            a new version, adding an existing upstream patch or by building a new patch.</para>

        <para>You might need to add a patch to several versions of the respective package in more
            that one project. The reason for that is that, if you fix a bug, you often need to fix
            it in various SUSE Linux Enterprise releases. For example, if you fix a bug in SUSE
            Linux Enterprise 11, you might also need to fix it in SUSE Linux Enterprise 12. For this
            purpose we will use two tools:</para>

        <itemizedlist>
            <listitem>
                <para><command>osc</command> to manage the package(s) and</para>
            </listitem>
            <listitem>
                <para><command>quilt</command> to manage the patch(es).</para>
            </listitem>
        </itemizedlist>

        <para>Using two tools occasionally requires switching from one tool to the other. At the
                <quote>junctions</quote>, each of the tools will <quote>enter the realm</quote> of
            the other tool. But in good UNIX tradition, each tools performs its own job, while being
            aware of the other tool. The commands for both tools come with a very extensive set of
            subcommands and very good manual pages. Options explained or mentioned in this document
            usually are placed after the subcommand. In consequence, for a correct command you need
            to type :</para>

        <screen>osc mbranch -c &lt;PKG></screen>

        <para>and NOT</para>

        <screen>osc -c mbranch &lt;PKG></screen>


        <para>The former command requests to check out files from the created branches, while the
            latter would specify to use an alternate configuration file
            <filename>mbranch</filename>” with as subcommand <command>PKG</command>.</para>

        <para>Both tools come with a built-in help system. To display the information for a given
            subcommand, type: </para>

        <screen>osc help &lt;subcommand></screen>

        <para>or</para>

        <screen>quilt &lt;subcommand> -h</screen>




    </sect1>


    <sect1 xml:id="sec.repos_projects">

        <title>Repositories and Projects</title>

        <para>This chapter focuses on <emphasis role="italic">repositories</emphasis>. You will have
            to upload packages to <emphasis role="italic">repositories</emphasis> and move packages
            from one <emphasis role="italic">repository</emphasis> to another. The term <emphasis
                role="italic">repository</emphasis> is often used as a synonym for <emphasis
                role="italic">project</emphasis>. But strictly speaking a <emphasis role="italic"
                >project</emphasis> is a set of packages and a <emphasis role="italic"
                >repository</emphasis> is the location where the files for these packages are
            stored. </para>

        <note>
            <title>Colons</title>
            <para>When you see colons (<quote>:</quote>) in a repository (or project) name,
                notionally replace them by slashes (<quote>/</quote>), to make the file name look
                more familiar. </para>

        </note>

        <para>A project can be</para>

        <itemizedlist>
            <listitem>
                <para>a software project (for example <emphasis role="strong">Apache</emphasis>,
                        <emphasis role="strong">Base:System</emphasis>, or <emphasis role="strong"
                        >Linux-PAM</emphasis>)</para>
            </listitem>
            <listitem>
                <para>a home project (for example <emphasis role="strong">home:jmoellers</emphasis>)
                </para>
            </listitem>
            <listitem>
                <para>a branch (for example <emphasis role="strong"
                        >home:jmoellers:branches:Linux-PAM</emphasis>)</para>
            </listitem>
            <listitem>
                <para>a product project (for example <emphasis role="strong"
                        >SUSE:SLE-12-SP3:GA)</emphasis>
                </para>
                <important>
                    <para><emphasis role="italic">product project</emphasis> is not an official
                        term</para>
                </important>
            </listitem>
        </itemizedlist>


        <para>You can list all projects with the command <command>osc ls /</command>. For the
            external build service, this command returns a rather long list of available projects
            (at the time of writing, almost 45,000 projects were available).</para>

        <para>Each package included in a product usually goes through at least three
            repositories:</para>

        <orderedlist>
            <listitem>
                <para>the <emphasis role="italic">development repository</emphasis>, or in short
                        <emphasis role="italic">devel repo</emphasis></para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="italic">Factory</emphasis>
                </para>
            </listitem>
            <listitem>
                <para>the <emphasis role="italic">product repository</emphasis></para>
            </listitem>
        </orderedlist>

        <para>In many cases a fourth repository is needed, which is the <emphasis role="italic"
                >branch</emphasis> that you create to work on the product. In these cases a package
            passes trough the following repositories:</para>

        <itemizedlist>
            <listitem>
                <para>the <emphasis role="italic">development repository</emphasis>, or in short
                        <emphasis role="italic">devel repo</emphasis></para>
            </listitem>
            <listitem>
                <para>your <emphasis role="italic">branch</emphasis></para>
            </listitem>
            <listitem>
                <para>once again the <emphasis role="italic">devel repo</emphasis></para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="italic">Factory</emphasis>
                </para>
            </listitem>
            <listitem>
                <para>the <emphasis role="italic">product repository</emphasis></para>
            </listitem>
        </itemizedlist>


        <sect2 xml:id="sec.upstream">
            <title>Upstream</title>

            <para><emphasis role="italic">Upstream</emphasis> is not a <emphasis role="italic"
                    >repository</emphasis> in the classical meaning, but usually it is the very
                basic source of a package. It could be a Git repository that you clone, or a web
                site from where you download a tarball. </para>

            <para>When you fix a bug, you should submit the patch to <emphasis role=""
                    >upstream</emphasis> to ensure it can be included into future versions of the
                package. This has the advantage that next time you upgrade the package from
                    <emphasis role="italic">upstream</emphasis>, you might be able to drop one or
                more local patches. In addition, you contribute your efforts to the community.
                However, getting the patch accepted might require some patience and persistence,
                because some upstream maintainers have very special requirements regarding how to
                fix a bug. But usually most upstream maintainers are grateful for any fixes.</para>
        </sect2>

        <sect2 xml:id="sec.dev_repo">
            <title>Development Repository</title>

            <para>The <emphasis role="italic">development repository</emphasis>, or in short
                    <emphasis role="italic">devel repo</emphasis>, is where you keep a package
                locally, after it has been downloaded or cloned from <emphasis role="italic"
                    >upstream</emphasis>. Most <emphasis role="italic">development
                    repositories</emphasis> are located on the external build service. Each
                    <emphasis role="italic">development repository</emphasis> has one or more
                maintainers and one or more bugowners. </para>

            <para>Only the maintainer(s) and the bugowner(s) can submit to this repository. Other
                contributors must branch the repository and then request the patch to be accepted by
                the maintainer(s) and/or bugowner(s). You can, however, check out from the <emphasis
                    role="italic">development repo</emphasis>, for example, if you just want to have
                a look at the source code or if you need to analyze a problem without first creating
                a branch (which takes up some space on the build servers).</para>

            <para>You can find the <emphasis role="italic">devel repo</emphasis> of a package by
                typing <command>osc develproject &lt;PRJ> &lt;PKG></command>. The
                command:</para>

            <screen>osc develproject openSUSE:Factory cvs</screen>
            <para>will display the following output</para>
            <screen>devel:tools:scm</screen>

            <note>
                <title>Short Version</title>
                <para>You can abbreviate <emphasis role="strong">develproject</emphasis> with the
                    short version<emphasis role="strong">db</emphasis>.</para>
            </note>

        </sect2>


        <sect2 xml:id="sec.factory">
            <title>Factory</title>

            <para>The Factory project is the rolling development code base for the openSUSE
                distributions Tumbleweed. Factory is mainly used as an internal term for openSUSE's
                distribution developers, and the target project for all contributions to openSUSE's
                main code base. There is a constant flow of packages going into Factory. There is no
                package or feature freeze; therefore, the Factory repository is not guaranteed to be
                fully stable and is not intended to be used as distribution itself.</para>

            <para>The core system packages receive automated testing via openQA, the automated test
                tool for Linux operating systems (for more information, see <link
                    xlink:href="http://open.qa/">http://open.qa/</link>). When automated testing is
                completed and the repository is in a consistent state, it is synchronized to the
                download mirrors and published as openSUSE Tumbleweed distribution, the rolling
                release version of the openSUSE project, featuring the newest technology (see
                https://www.opensuse.org/#Tumbleweed). It is of course also the basis for openSUSE
                Leap, the regular annual release from the openSUSE project, with security and
                stability being the main focus. </para>

            <para>In addition, Factory is used as the base repository containing the code stream for
                the development of the next major version of SUSE Linux Enterprise and all related
                enterprise-class products. Therefore it is all the more important to keep this
                repository up to date. </para>

            <note>
                <title>Community Project</title>
                <para><emphasis role="strong">openSUSE:Factory</emphasis> is part of the openSUSE
                    community project. This means it resides outside of the official SUSE product
                    projects, and is not regulated or controlled by SUSE. Package maintainers are
                    usually members of the openSUSE community.</para>
            </note>

            <para>A major rule has been established which is called <quote>
                    <emphasis role="italic bold">Factory First</emphasis>
                </quote>. In theory, this means that you have to submit any package that you want to
                see included in any version of openSUSE or SUSE Linux Enterprise to <emphasis
                    role="italic">Factory</emphasis>. In practice, you will submit your package or
                patch to the <emphasis role="italic">devel repo</emphasis> first and then you will
                submit to <emphasis role="italic">Factory</emphasis> from there. As you branch and
                check out from the <emphasis role="italic">devel repo</emphasis>,
                    <command>osc</command> will automatically submit changes to the <emphasis
                    role="italic">devel repo</emphasis> master. Once you have submitted or updated a
                package in its <emphasis role="italic">devel repo</emphasis>, you (or the maintainer
                of the <emphasis role="italic">devel repo</emphasis>) must submit the package to
                    <emphasis role="strong">openSUSE:Factory</emphasis>. </para>

            <important>
                <title>Factory First Policy</title>
                <para> After you have submitted or updated a package in the <emphasis role="italic"
                        >devel repo</emphasis>, you always need to submit it to the next step! As
                    long as the package is updated or patched only in its <emphasis role="italic"
                        >devel repo</emphasis>, the new version of the package will not be included
                    with any new release. Only when it is submitted to <emphasis role="strong"
                        >openSUSE:Factory</emphasis>, it is available for incorporation into future
                    product releases. This policy is called “Factory First”!</para>
            </important>

            <para>From <emphasis role="strong">openSUSE:Factory</emphasis>, the package will later
                be submitted to a <emphasis role="italic">distribution repository</emphasis>, for
                example to <emphasis role="strong">SUSE:SLE-15:GA</emphasis>. Usually this is done
                by the package maintainers, but occasionally you might be asked to submit your new
                or updated package there.</para>

        </sect2>

        <sect2 xml:id="sec.home_project">
            <title>Home Project</title>

            <para>The <emphasis role="italic">Home Project</emphasis> is your private repository. It
                is called <emphasis role="strong">home:&lt;username></emphasis> (for example
                    <emphasis role="strong">home:jmoellers</emphasis>). In this repository, you
                store your own projects, and you create your <emphasis role="italic"
                    >branches</emphasis>.</para>
        </sect2>

        <sect2 xml:id="sec.branch">
            <title>Branch</title>
            <para>When you create a <emphasis role="italic">branch</emphasis> from an existing
                project, for example from a <emphasis role="italic">devel repo</emphasis> of which
                you are not the maintainer or bugowner, this is stored under <emphasis role="strong"
                    >home:&lt;username>:branches</emphasis>. In the follwing example:</para>
            <screen>home:jmoellers:branches:network:utilities/wget</screen>
            <para>the <emphasis role="strong">home:jmoellers:branches:</emphasis>stands for the
                branch, the <emphasis role="strong">network:utilities</emphasis> stands for the
                    <emphasis role="strong">devel project</emphasis>, and <emphasis role="strong"
                    >wget</emphasis> is the product.</para>

            <para>Some maintainers or bugowners branch from their own devel repos, to ensure clean
                development processes, and to allow for propper documentation. </para>

            <para>The <command>osc</command> command records from which repository the branch was
                created. When you submit changes back to your branch, it also makes a request to the
                maintainers of the package to accept and submit the changes into the original
                repository.</para>


        </sect2>

        <sect2 xml:id="sec.product_projects">
            <title>Product Projects</title>

            <para>For the purpose of this document, the term <emphasis role="italic">Product
                    Projects</emphasis> refers to the repositories containing the packages that are
                bundled into a SUSE product. When a new product is built, its repository usually is
                named <emphasis role="strong">SUSE:&lt;productname>:GA</emphasis> (for example
                    <emphasis role="strong">SUSE:SLE-15:GA</emphasis>). At a later stage of the
                lifecycle, after the General Availability (GA) of the product, when the service
                packs for a product need to be created, a repository <emphasis role="strong"
                    >SUSE:&lt;productname>:Update:Test</emphasis> is set up. This is the
                repository to which you now should submit your patches. The next service packs of a
                product will be built from this repository.</para>

            <note>
                <title>GA Production Repository</title>
                <para>You cannot directly submit to the GA production repository. As the <emphasis
                        role="strong">Factory First</emphasis> rule applies, you first must submit
                    to Factory. Then the product release team will fetch the package from there. You
                    can, however, submit to the <emphasis role="strong">Update:Test</emphasis>
                    repositories when you fix a bug of an older release.</para>
            </note>

            <para>Each distribution and each service pack has its own repository (for example
                    <emphasis role="strong">SLE-xx-SPyy</emphasis>). If you fix a bug in a package’s
                devel repo (after which you submit the patch to
                    <emphasis>openSUSE:Factory</emphasis>), you may need to also fix it in the
                    <emphasis role="italic">distribution repos</emphasis>.</para>

            <para>This requires the following steps:</para>

            <orderedlist>
                <listitem>
                    <para>Creating branches for all versions which are currently in <emphasis
                            role="italic">maintenance mode</emphasis>:</para>
                    <screen>osc mbranch</screen>
                </listitem>
                <listitem>
                    <para>Checking the branches out to your local disk. The previous step and this
                        step can be combined into one step:</para>
                    <screen>osc  mbranch -c</screen>
                </listitem>
                <listitem>
                    <para>Creating one or more patches and modifying the associated files (for
                        example the <emphasis role="strong">spec</emphasis> file)</para>
                </listitem>
                <listitem>
                    <para>Submitting the changes back to the <emphasis role="italic">product
                            repo</emphasis></para>
                </listitem>
            </orderedlist>

            <para>The last step will not automatically update the package in the <emphasis
                    role="italic">product repo</emphasis>. The package maintainer will do that after
                some necessary tests.</para>
        </sect2>
    </sect1>

    <sect1 xml:id="sec.package">
        <title>Package</title>

        <para>The next paragraphs focus on packages. A package consists of:</para>

        <itemizedlist>
            <listitem>
                <para>a <filename>spec</filename> file describing how the binary package is to be
                    built from the sources,</para>
            </listitem>
            <listitem>
                <para>the <emphasis role="italic">pristine sources</emphasis>, means the unmodified
                    base source archive which you usually download from the upstream git repository,
                    possibly accompanied by a signature file,</para>
            </listitem>
            <listitem>
                <para>a <filename>changes</filename> file containing a human readable list of the
                    changes introduced with each patch, and</para>
            </listitem>
            <listitem>
                <para>possibly) a set of patches to be applied, for example functional enhancements,
                    adaptations to SUSE specifics or bug fixes</para>
            </listitem>
        </itemizedlist>

        <para>Other files might be included in a package, but they are not relevant for the purpose
            of this document. You can find all files of a package in the <emphasis role="italic"
                >source RPM</emphasis>.</para>

        <para>The command <command>osc ls</command> lists all packages of a project or
            repository.</para>

        <para>Example:</para>
        <screen>osc ls devel:tools:scm</screen>
        <para>This command lists all packages in the <emphasis role="strong">s</emphasis>ource
                <emphasis role="strong">c</emphasis>ode <emphasis role="strong"
            >m</emphasis>anagement section of the <emphasis role="strong">devel</emphasis>opment
                <emphasis role="strong">tools</emphasis>: from <emphasis role="strong"
                >EasyMercurial</emphasis> through <emphasis role="strong">bugzilla</emphasis>,
                <emphasis role="strong">cvs</emphasis>, <emphasis role="strong">git</emphasis>,
                <emphasis role="strong">osc</emphasis>, <emphasis role="strong">rcs</emphasis>,
                <emphasis role="strong">trac</emphasis>, down to <emphasis role="strong"
                >xmlto</emphasis>.</para>

        <para>With the command <command>osc search</command> (or short <command>osc se</command>)
            you can find the package(s) a project is in:</para>

        <para>Example:</para>
        <screen>osc se bugzilla</screen>
        <para>Besides listing the home projects of contributors who have created branches of the
                <emphasis role="strong">bugzilla</emphasis> package, this command returns the
            following information:</para>
        <screen>devel:tools:scm       bugzilla</screen>

    </sect1>

    <sect1 xml:id="sec.get_package">
        <title>Getting the Package</title>

        <para>At a certain point in time, you will work with a package. You</para>

        <orderedlist>
            <listitem>
                <para>either have worked out a fix for a bug yourself,</para>
            </listitem>
            <listitem>
                <para>or found an upstream patch that you want to include,</para>
            </listitem>
            <listitem>
                <para>or you want to upgrade a package to a new version.</para>
            </listitem>
        </orderedlist>

        <para>If you want to update a <emphasis role="italic">package</emphasis>, you should use the
            existing one as the skeleton. You also you must keep and amend the
                <filename>changes</filename> file. If you want to write a patch or use an existing
            patch, you need the current version of the package because you just add your patch to
            the package. </para>

        <para>At this stage, you should also have a clear idea of the directory structure you want
            to use. One option is to store all your patches and packages under your <emphasis
                role="strong">HOME</emphasis> directory. But you can also consider to create
            subdirectories by topics for the work you currently have in progress. In any case, the
            meta data stored inside your file care for submission to the correct directory.</para>

        <sect2 xml:id="sec.devel_repo_main">
            <title>Development Repository – Maintainer or Bugowner</title>

            <para>You can always check out the sources from the <emphasis role="italic">devel
                    repo</emphasis>. But as long as you are not the maintainer or bugowner of that
                repository, you usually will not be able to submit your changes directly. As
                mentioned before, the tools <command>osc</command> and <command>quilt</command> know
                where a package comes from and will automatically submit it back to the correct
                repository.</para>

            <para>After you moved to the directory where you want to work on the sources, you can
                check out the current revision of the package by running the command:</para>

            <para>
                <command>osc co &lt;RJ> &lt;PKG></command>
            </para>

            <para>where &lt;PRJ ist the project the package is part of and &lt;PKG is the
                package’s name.</para>

            <para>Example:</para>

            <screen>osc co devel:languages:perl perl-RPM-VersionSort</screen>

            <para>This command checks out a complete directory tree and creates <emphasis
                    role="strong">devel:languages:perl/perl-RPM-VersionSort</emphasis>. Inside the
                    <emphasis role="strong">perl-RPM-VersionSort</emphasis> directory, all required
                files are available: <filename>spec</filename> file, <filename>sources</filename>
                archives, <filename>sources</filename> files, patches etc.</para>

            <para>In case you have created a number of working directories and you try to check out
                a package you already have a working copy of, you will get an error message:</para>

            <screen>error: ‘PRJ/PKG’ is already an initialized osc working copy</screen>

            <para>Change to the indicated directory and update the content running the command
                    <command>cd &lt;PRJ>/&lt;PKG>; osc update</command>, or short
                    <command>cd &lt;PRJ>/&lt;PKG>; osc up</command>.</para>

            <para>This will check out any changed files and tell you which revision is the current
                one. Everything is now set and you may proceed to section Working on the
                Sources.</para>

        </sect2>

        <sect2 xml:id="sec.devel_repo_non_main">
            <title>Development Repository - Non-Maintainer or Non-Bugowner </title>

            <para>There are at least two situations where you <emphasis role="strong">must
                    not</emphasis> check out directly from the <emphasis role="italic">devel
                    repo</emphasis>:</para>

            <orderedlist>
                <listitem>
                    <para>If you need to patch an already released package, the <emphasis
                            role="italic">devel repo</emphasis> usually holds a more current version
                        than the released package. You must not update the release version of such a
                        package (the procedure <emphasis role="italic">devel repo → factory →
                            product repo</emphasis> will not work).</para>
                </listitem>
                <listitem>
                    <para>2. If you are not the maintainer or bugowner of the package, you cannot
                        submit your changes back to the <emphasis role="italic">devel
                            repo</emphasis>.</para>
                </listitem>
            </orderedlist>

            <para>In these cases you need to create a <emphasis role="italic">branch</emphasis>
                first. Then you need to check out the sources from this branch.</para>



            <sect3 xml:id="sec.branching">
                <title>Branching</title>

                <para>The branch you work on will be created on the build server. When you finished
                    your work and checked out your package, remove the branch on the build server to
                    free up resources. If you need the branch for additional tasks, you can remove
                    it also at a later point in time. </para>

                <para>Create a branch with the command <command>osc branch &lt;PRJ>
                        &lt;PKG></command>. This command creates the subdirectory <emphasis
                        role="strong"
                        >home:&lt;username>:branches:&lt;PRJ>/&lt;PKG></emphasis> on the
                    server and populates it with the source files (spec file, pristine sources,
                    changes file, current set of patches, etc.) of the package. </para>

                <para>If the patch also needs to be applied to maintained versions, means versions
                    already released as a product, use the command <command>osc mbranch
                        &lt;PKG></command> to branch the projects. The <quote>
                        <emphasis role="strong">m</emphasis>
                    </quote> in <quote>
                        <emphasis role="strong">mbranch</emphasis>
                    </quote> stands for <quote>
                        <emphasis role="strong">multiple</emphasis>
                    </quote>, and not as often wrongly assumed for <quote>
                        <emphasis role="strong">maintenance</emphasis>
                    </quote>.</para>

                <note>
                    <title>Add Package Name</title>
                    <para>Make sure you add the <emphasis role="italic">package</emphasis> name and
                            <emphasis role="strong">not</emphasis> the <emphasis role="italic"
                            >project</emphasis> name to the command <command>osc branch</command>.
                            <command>mbranch</command> automatically detects in which releases the
                        package is under maintenance and creates the appropriate directory
                        structure. Both commands <command>osc branch</command> and <command>osc
                            mbranch</command> provide a list of the files they have created a branch
                        for, and allow you to easily see which releases you need to work on.</para>
                </note>
            </sect3>

            <sect3 xml:id="sec.checkout">
                <title>Check Out</title>

                <para>The commands <command>osc branch</command> and <command>osc mbranch</command>
                    only create a branch on the build server. To create a branch on your local
                    system including copies of the packages you want to work on, check them out with
                    the command <command>osc co home:&lt;username>:branches:&lt;PRJ>
                        &lt;PKG></command> (this is the same way as you check out a package from
                    the devel repo). </para>

                <para>This command creates the directory structure <emphasis role="strong"
                        >home:&lt;username>:branches:&lt;PRJ>/&lt;PKG></emphasis> in the
                    current directory on your local machine and populates it with all files. </para>

                <para>If you created your new subdirectory by mistake within the wrong local
                    directory, you can remove the newly created one with the command <command>rm
                        -rf</command>. Then move to the correct directory where the new subdirectory
                    should be located, and check out again.</para>

            </sect3>

            <sect3 xml:id="sec.branch_checkout">
                <title>Branch and Check Out</title>

                <para>When you update or modify a package, you usually have to perform both steps,
                    branching the repository, and checking out the package. You can easily combine
                    both steps into one command by typing <command>osc branchco &lt;PRJ>
                        &lt;PKG></command> or by using the short command version <command>osc
                        bco &lt;PRJ> &lt;PKG></command>.</para>

                <para>If you have used the <command>osc mbranch</command> command for branching, you
                    cannot combine the two steps <command>mbranch</command> and
                        <command>checkout</command> into one command. However, you can specify the
                        <option>--checkout</option> option by typing <command>osc mbranch –-checkout
                        &lt;PKG></command>, or in short <command>osc mbranch -c
                        &lt;PKG></command>.</para>

                <note>
                    <title>Add Package Name</title>
                    <para>Make sure you add the package name and <emphasis role="strong"
                            >not</emphasis> the project name to the command, as this command will
                        branch and check out all projects where the respective package is under
                        maintenance.</para>
                </note>

            </sect3>
        </sect2>
    </sect1>

    <sect1 xml:id="sec.working_sources">
        <title>Working on the Sources</title>

        <para>The sources are now available on your local system and you can start modifying them.
            Change to the package’s working directory. If you checked out from the <emphasis
                role="italic">devel repo</emphasis> or from a <emphasis role="italic">distribution
                repo</emphasis>, type: the command <command>cd &lt;PRJ>/&lt;PKG></command>.
            If you have branched and checked out of that branch, type the command <command>cd
                home:&lt;username>:branches:&lt;PRJ>/&lt;PKG></command>.</para>

        <para>Inside the current working directory, you should find at least the following
            files:</para>

        <orderedlist>
            <listitem>
                <para>the spec file <filename>&lt;PKG>.spec</filename></para>
            </listitem>
            <listitem>
                <para>the pristine sources, for example
                        <filename>&lt;PKG>-vers.tar.bz2</filename></para>
            </listitem>
            <listitem>
                <para>the changes file <filename>&lt;PKG>.changes</filename></para>
            </listitem>
            <listitem>
                <para>any patches</para>
            </listitem>
            <listitem>
                <para>possibly some other files that belong to this package like an
                        <filename>rpmlintrc</filename> file</para>
            </listitem>
        </orderedlist>

        <para>Your next steps depend on whether you want to</para>

        <orderedlist>
            <listitem>
                <para>upgrade the package to a new version, which is explained in section
                    "Upgrading", or</para>
            </listitem>
            <listitem>
                <para>patch the package to add functionality or fix a bug, which is explained in
                    section "Patching".</para>
            </listitem>
        </orderedlist>

        <sect2 xml:id="sec.upgrading">
            <title>Upgrading</title>

            <para>When you upgrade the package to a new version of the sources, you must also check
                if any of the old patches are obsoleted by the new version and if they still apply
                without (major) problems. You might hit upon an obsolete or faulty patch when one or
                more patches have been submitted and accepted upstream and integrated into the
                sources. Existing patches sometimes do not apply without problems when the relevant
                source sections have changed considerably, thus confusing the patching program.
                Fixing issues caused by faulty patches can become an iterative and painful
                process.</para>

            <sect3 xml:id="sec.pristine_sources">
                <title>Pristine Sources</title>

                <para>As you created a complete set of new sources, the first step should be to
                    replace the old sources by the new ones. Do not forget to remove the old sources
                    to avoid any <quote>hiccup</quote> within the build service. You might however
                    want to save the old sources to a subdirectory of your HOME directory for
                    reference and fallback. In addition, if the sources come with a checksum (for
                    example an MD5SUM) or a signature, you might want to include it.</para>
            </sect3>

            <sect3 xml:id="sec.spec_file">
                <title>Spec File</title>

                <para>Modify the spec File to reflect the new release (version, release, source
                    name). First, disable all existing patches, as some of them might be obsolete or
                    have problems being applied (for example if the sources have changed
                    considerably to disrupt the patch program). You can also temporarily move all
                    patches to another directory and bring them back in when required.</para>
            </sect3>

            <sect3 xml:id="sec.build_source_tree">
                <title>Build the Source Tree</title>

                <para>Set up the source tree by running the command <command>quilt setup
                        &lt;packagename>.spec</command>.</para>

                <para>As there are no patches (yet) available, this command mainly unpacks the
                    tarball.</para>

                <note>
                    <title/>
                    <para>Often you can just use the command <command>quilt setup *.spec</command>
                        as usually there is only one spec file. As <command>quilt setup</command>
                        accepts only a single non-option argument, it cannot do any damage and will
                        only return a warning message. This means you can redo the command with the
                        desired spec file.</para>
                </note>

            </sect3>

            <sect3 xml:id="sec.check_patches">
                <title>Check the Patches</title>

                <para>Now inspect the patches that you removed previously one by one. Determine
                    whether they are still needed. As these are ordinary <quote>patch</quote> type
                    patches, you can use the command <command>patch –dry-run -p1
                        &lt;wherever>/patchfile</command> to see if the patch applies well. As
                    some patches were built one directory level deeper, you might need to change to
                    that directory and run the command <command>patch –dry-run -p0</command>
                    instead. </para>

                <para>If the patch works well, use the command <command>quilt import
                        &lt;wherever>/patchfile</command> to import the patch and add it to the
                        <filename>series</filename> file.</para>

                <para>With the command <command>quilt push</command> (no further arguments) you
                    actually apply the patch. Add the patch to the spec file, while keeping the
                    original numbering, and continue with section "Build the Package". </para>

                <para>If you prefer, you can re-introduce all the patches you removed earlier and
                    build the package subsequently. You can also add one patch at a time and build
                    the package after each addition.</para>

                <para>If a patch is not accepted, you most probably need to re-create it. Section
                    "Patching" details how to build a new patch. When you have finished adding all the
                    patches, proceed to section "Build the Package.</para>

            </sect3>


        </sect2>

    </sect1>



    <sect1 xml:id="sec.references">
        <title>References</title>

        <para>For more detailed information and references, have a look at the following
            articles:</para>

        <itemizedlist>
            <listitem>
                <para>
                    <link
                        xlink:href="http://www.hardwaresecretscom/everything-you-need-to-know-about-the-cpu-c-states-power-saving-modes/"
                        >Hardware Secrets, <quote>Everything You Need to Know About the CPU C-States
                            Power Saving Modes</quote></link>
                </para>
            </listitem>
            <listitem>
                <para>
                    <link
                        xlink:href="https://software.intel.com/en-us/blogs/2008/03/12/c-states-and-p-states-are-very-different"
                        >Intel Developer Zone, <quote>C-states and P-states are very
                            different</quote></link>
                </para>
            </listitem>
            <listitem>
                <para>
                    <link xlink:href="https://haypo.github.io/intel-cpus.html">GitHub, Haypo Blog,
                            <quote>Intel CPUs: P-state, C-state, Turbo Boost, CPU frequency,
                            etc.</quote></link>
                </para>
            </listitem>
            <listitem>
                <para>
                    <link
                        xlink:href="https://github.com/HewlettPackard/LinuxKI/wiki/Power-vs-Performance"
                        >GitHub, HewlettPackard/LinuxKl, <quote>Power Savings vs. Performance on
                            Linux</quote></link>
                </para>
            </listitem>
            <listitem>
                <para>
                    <link
                        xlink:href="https://people.cs.pitt.edu/~kirk/cs3150spring2010/ShiminChen.pptx"
                        >Presentation, Shimin Chen, Intel Labs Pittsburgh, <quote>Power Management
                            Features in Intel Processors</quote></link>
                </para>
            </listitem>
            <listitem>
                <para>
                    <link
                        xlink:href="https://www.cisco.com/c/en/us/about/security-center/network-performance-metrics.html"
                        >Cisco, <quote>Bandwidth, Packets Per Second, and Other Network Performance
                            Metrics</quote></link>
                </para>
            </listitem>
            <listitem>
                <para>
                    <link
                        xlink:href="https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt"
                        >Kernel documentation</link>
                </para>
            </listitem>
            <listitem>
                <para>
                    <link
                        xlink:href="https://lonesysadmin.net/2013/12/22/better-linux-disk-caching-performance-vm-dirty_ratio/"
                        >The Lone Sysadmin, <quote>Better Linux Disk Caching &amp; Performance
                            with vm.dirty_ratio &amp; vm.dirty_background_ratio</quote></link>
                </para>
            </listitem>
            <listitem>
                <para>
                    <link
                        xlink:href="https://doc.opensuse.org/documentation/leap/tuning/html/book.sle.tuning/cha.tuning.taskscheduler.html"
                        >openSUSE Leap 42.3 System Analysis and Tuning Guide, Part V, Chapter 13
                        Tuning the Task Scheduler </link>
                </para>
            </listitem>
        </itemizedlist>

    </sect1>

    <sect1 xml:id="sec.legal_notice">
        <title>Legal Notice</title>
        <para>Copyright &copy;2006– 2017 SUSE LLC and contributors. All rights reserved. </para>
        <para>Permission is granted to copy, distribute and/or modify this document under the terms
            of the GNU Free Documentation License, Version 1.2 or (at your option) version 1.3; with
            the Invariant Section being this copyright notice and license. A copy of the license
            version 1.2 is included in the section entitled <quote>GNU Free Documentation
                License</quote>.</para>
        <para>SUSE, the SUSE logo and YaST are registered trademarks of SUSE LLC in the United
            States and other countries. For SUSE trademarks, see <link
                xlink:href="http://www.suse.com/company/legal/"
                >http://www.suse.com/company/legal/</link>. Linux is a registered trademark of Linus
            Torvalds. All other names or trademarks mentioned in this document may be trademarks or
            registered trademarks of their respective owners.</para>
        <para>This article is part of a series of documents called "SUSE Best Practices". The
            individual documents in the series were contributed voluntarily by SUSE's employees and
            by third parties.</para>
        <para>The articles are intended only to be one example of how a particular action could be
            taken. They should not be understood to be the only action and certainly not to be the
            action recommended by SUSE. Also, SUSE cannot verify either that the actions described
            in the articles do what they claim to do or that they don't have unintended
            consequences.</para>
        <para>Therefore, we need to specifically state that neither SUSE LLC, its affiliates, the
            authors, nor the translators may be held liable for possible errors or the consequences
            thereof. Below we draw your attention to the license under which the articles are
            published.</para>
    </sect1>
    <?pdfpagebreak style="suse2013" formatter="fop"?>
    <xi:include href="license-gfdl.xml"/>
</article>
